// Path to IdExtenso entry point.
// ---
#include '../$$.jsxinc'

// L10N is powered by YALT.
// ---
#include '../etc/$$.Yalt.jsxlib'

// Collator module.
// ---
#include '../etc/$$.Collator.jsxlib'

$$.Yalt.addPackage
(
"""
	/*<YALT> # FRENCH # GERMAN # SPANISH # ITALIAN # RUSSIAN

	Punctuation Marks # Ponctuation # Satzzeichen # Puntuación # Punteggiatura # Знаки препинания
	(Ignore) # (Ignorer) # (Ignorieren) # (Ignorar) # (Ignora) # (Игнорировать)
	Unicode Collation # Classement Unicode # Unicode-Sortierung # Intercalación Unicode # Unicode # Сортировка Unicode
	Letter-by-Letter # Lettre par lettre # Buchstabe für Buchstabe # Letra por letra # Lettera per lettera # Письмо-на-письма
	Word-by-Word # Mot par mot # Wort für Wort # Palabra por palabra # Parola per parola # Слово за слово

	Case # Casse # Groß-/Kleinschreibung # Mayús./minús. # Maiuscole/minuscole # Регистр
	Uppercase first # Majuscules en premier # Zuerst Großbuchstaben # Mayúsculas primero # Prima le maiuscole # Сначала прописное
	Lowercase first # Minuscules en premier # Zuerst Kleinbuchstaben # Minúsculas primero # Prima le minuscole # Сначала строчные
	
	Ignore diacritics # Ignorer les diacritiques # Diakritische Zeichen ignorieren # Ignorar signos diacríticos # Ignora e segni diacritici # Игнорировать диакритические знаки
	Sort numbers # Trier les nombres # Nummern sortieren # Ordenar números # Ordina i numeri # Сортировать числа

	Output # Sortie # Ausgabe # Salida # Output # Вывод

	</YALT>*/
"""
);

// Load the framework.
// ---
$$.load();

// =============================================================================
// CollatorTester [200531] [200812]
// Live-test IdExtenso's collation module in various languages.
// ---
// Demonstrates:
// - Using the `Collator` module.
// - Adding a YALT package.
// - Simple modal dialog interface generated by `ScriptUI.builder`.
// =============================================================================

try
{
	const UI = function UI(  w)
	//----------------------------------
	{
		w = ScriptUI.builder.call(callee,callee.RES);
		w.show();
	};
	
	UI.TEST_ITEMS = "!RAË|-braender|.hello|A.B.C|ABBA|ABN|AERO|Abner|Abnég.|Brad|Bränder, Hans|Ca|Ce|Da|De|Dorfer, J.|Dörfener, F.|DŽa|DŽe|Eros|HB|Ha|Hi!|Hé|I.N.A.|IJmuiden|Ih!|Ikea|LA|LAWR|LJA|LLOM|LLONG|LLONGYFARCH|LWCUS|MA|Mueller, G.|Muller, E.|Muller, I.|Müller, F.|Müller, H.|O.J.|Oh|ab ner|abc|altså|aéré|bot|braender|brand|bras|broc|bryst|brænder|brød|buzhugenn|c'hoar|c:/ab|chispa|chug|cinco|cote|credo|côte|côté|côté|daeraouenn|fjord|he|hip hop|hip-hop|in punto|jeg|law|llama|locus|lomo|luz|ohé|ordet|radio|rana|rap|rastrillo|robot|roc|ráfaga|rápido|vild|Ãlto|Åbner|Ça|Ère|åbner|ære|çà|è|øje|Ća|Će|ĉa|ĉe|ĉote|Ča|Če|Đa|Đe|весь|вот|говорить|год|для|как|который|на|не|он|сказать|такой|уже|что";
	
	// Some static settings.
	// ---
	UI.TITLE = "Collator Tester";
	UI.MARGINS = 22;

	UI.ON_WSHW = function onShow(  wg,q,s)
	//----------------------------------
	// this :: Window (Dialog)
	{
		(wg=this.List).active = true;
		q = wg.properties.items;
		s = q['='+$$.Collator.getLocaleKey('asIso')];
		wg.selection = wg.find(s)||0;
		wg.onChange();
	};

	UI.ON_LCHG = function onChange(  q,s,tk,bullet,nv)
	//----------------------------------
	// this :: DropDownList [`List`]
	{
		q = this.properties.items;
		s = this.selection.text;

		tk = q['_'+s];
		$$.Collator.setTailor(tk);

		bullet = ( 'ROOT'==tk || 'EOR'==tk ) ? '\u25B7' : '\u25B6';
		nv = q['§'+s];
		nv==tk ? (nv='') : (nv=' '+nv);
		
		this.window.Info.text = bullet + nv + '  [' + tk + ']';
	};
	
	UI.ON_BCLK = function onClick(  w,ed,a,cs,dc,lvl,pc,nm)
	//----------------------------------
	// this :: Button [`Sort`]
	{
		w = this.window;

		a = w.Input.text.split(RegExp.LINEs);

		cs = w.Case.selection.index;   // L3  -> 0:Ignore | 1: UpperFirst | 2:LowerFirst
		dc = !w.IgnoreDiac.value;      // L2
		lvl = dc ? (cs?3:2) : (cs?4:1);

		pc = w.Punct.selection.index;  // 0:Ignore | 1: UCA | 2:LBL | 3:WBW
		nm = w.Numb.value;
		$$.Collator
		(a
			, lvl
			, [0,1,'LBL','WBW'][pc]
			, { sortNumbers:nm , upperFirst:1==cs }
		);

		w.Output.text = a.join('\r');
		ScriptUI.setFocus(w.Quit);
	};
	
	// UI resource object.
	// ---
	UI.RES =
	{
		properties:                     { type:'dialog', text:UI.TITLE, },
		margins:                        UI.MARGINS,
		spacing:                        UI.MARGINS,
		orientation:                    'row',
		alignChildren:                  ScriptUI.LT,
		onShow:                         UI.ON_WSHW,

		Group$0:
		{
			properties:                 { },
			margins:                    0,
			spacing:                    30,
			orientation:                'column',
			alignChildren:              ScriptUI.LT,

			Group$GpLang:
			{
				margins:                0,
				spacing:                6,
				orientation:            'column',

				StaticText$Lang:
				{
					properties:         { text:__("Language:") },
					optimalSize:        { width:220, height:24 },
				},
				DropDownList$List:
				{
					properties:         { items:$$.Collator.getRichList() },
					optimalSize:        { width:220, height:24 },
					onChange:           UI.ON_LCHG,
				},

				StaticText$Info:
				{
					properties:         { text:'' },
					optimalSize:        { width:220, height:24 },
				},

			},

			Group$GpSort:
			{
				margins:                0,
				spacing:                6,
				orientation:            'column',
				alignChildren:              ScriptUI.LT,

				StaticText$1:
				{
					properties:         { text:__("Punctuation Marks:") },
					optimalSize:        { width:220, height:24 },
				},
				DropDownList$Punct:
				{
					properties:         { items:
						[
						__( "(Ignore)" ),
						__( "Unicode Collation" ),
						__( "Letter-by-Letter" ),
						__( "Word-by-Word" ),
						] },
					optimalSize:        { width:220, height:24 },
					selection:          2,
				},


				StaticText$2:
				{
					properties:         { text:__("Case:") },
					optimalSize:        { width:220, height:24 },
				},
				DropDownList$Case:
				{
					properties:         { items:
						[
						__( "(Ignore)" ),
						__( "Uppercase first" ),
						__( "Lowercase first" ),
						] },
					optimalSize:        { width:220, height:24 },
					selection:          0,
				},
				
				Group$EMPTY:
				{
					properties:         {},
					optimalSize:        { width:20, height:20 },
				},

				Checkbox$IgnoreDiac:
				{
					properties:         { text:__("Ignore diacritics") },
					value:              true,
				},

				Checkbox$Numb:
				{
					properties:         { text:__("Sort numbers") },
					value:              true,
				},

			},
			
			Group$Buttons:
			{
				margins:                0,
				orientation:            'row',
				spacing:                UI.MARGINS,
				alignChildren:          ScriptUI.CB,
				
				Button$Quit:
				{
					properties:         { text:__("Quit"), name:'OK' },
					minimumSize:        { width: 80 },
				},

				Button$Sort:
				{
					properties:         { text:__("Sort") + " >>>" },
					minimumSize:        { width: 100 },
					onClick:            UI.ON_BCLK,
				},
			},

		},

		Panel$1:
		{
			properties:                 { text:__("List:"), },
			margins:                    UI.MARGINS,
			spacing:                    16,
			orientation:                'column',

			EditText$Input:
			{
				properties:             { text:UI.TEST_ITEMS.split('|').join('\r'), multiline:true },
				optimalSize:            { width:200, height:320 },
			},
		},

		Panel$2:
		{
			properties:                 { text:__("Output:"), },
			margins:                    UI.MARGINS,
			spacing:                    16,
			orientation:                'column',

			EditText$Output:
			{
				properties:             { text:'', multiline:true, readonly:true },
				optimalSize:            { width:200, height:320 },
			},
		},
	};
	
	// Send events to be listened to and show.
	// ---
	UI();
}
catch(e)
{
	// Should something go wrong.
	// ---
	$$.receiveError(e);
}
// =============================================================================


// Unload the framework to cleanup memory.
// ---
$$.unload();