// Path to IdExtenso entry point.
// ---
#include '../$$.jsxinc'

// PageRange module.
// ---
#include '../etc/$$.PageRange.jsxlib'

// Load the framework.
// ---
$$.load();

// =============================================================================
// PageRangeTester [210817]
// Parse, format and normalize page ranges.
// ---
// Demonstrates:
// - Using the `PageRange` module.
// - Simple modal dialog interface generated by `ScriptUI.builder`.
// =============================================================================

try
{
	ScriptUI.builder
	({
		properties:                     { type:'dialog', text:"PageRange Tester", },
		margins:                        22,
		spacing:                        22,
		orientation:                    'column',
		alignChildren:                  ScriptUI.LT,

		Panel$1:
		{
			properties:                 { text:'', },
			margins:                    22,
			spacing:                    10,
			orientation:                'column',
			alignChildren:              ScriptUI.LT,
			
			StaticText$0:               { properties:{text:"Enter a numeric sequence, e.g. `7, 10-15, 17, 25`"} },

			EditText$Input:
			{
				properties:             { text:'' },
				optimalSize:            { width:400 },
				onChanging:             function onChanging( w)
				{
					w = this.window;
					w.Info.text = '';
					w.Count.enabled = w.Format.enabled = w.Display.enabled = !!this.text;
				},
			},

			StaticText$Note:
			{
				properties:             { text:"\u2022 Supports overlaps and/or dups: `7, 7, 5-8, 3-6`\r\u2022 Supports unordered data: `8, 2-3, 12, 5`\r\u2022 Interprets elided ranges: `210-8` means `210-218`.", multiline:true },
				optimalSize:            { width:400,height:60 },
			},
			
			StaticText$Info:
			{
				properties:             { text:'', multiline:true },
				optimalSize:            { width:400,height:120 },
			},
		},

		Group$2:
		{
			margins:                    22,
			spacing:                    20,
			orientation:                'row',
			alignment:                  ScriptUI.CT,

			Button$Count:
			{
				properties:             { text:'Count' },
				helpTip:                "Tells how many page numbers are targetted...",
				enabled:                false,
				onClick:                function onCount(  w,n)
				{
					w = this.window;
					n = $$.PageRange.count(w.Input.text);
					w.Info.text = n ? (n + " element(s).") : "No element.";
				},
			},
			Button$Format:
			{
				properties:             { text:'Format' },
				helpTip:                "Reformat the sequence, both in normalized form and custom format...",
				enabled:                false,
				onClick:                function onFormat(  w,r)
				{
					const PR = $$.PageRange;
					w = this.window;
					r = PR.normalize(w.Input.text);
					if( !r ){ w.Info.text = "No result."; return; }
					w.Info.text = "Normalized form:\r" + r
						+ "\r\r\rCustom reformat (minRange:2, Oxford elision, etc):\r"
						+ PR.format(PR.parse(r),
						{
							separator:  ' ; ',
							joiner:     '\u2014',
							minRange:   2,
							elision:    'Oxford', // None|FinalThreeDigits|FinalTwoDigits|Oxford|FewestFigures
						});
				},
			},
			Button$Display:
			{
				properties:             { text:'Display' },
				helpTip:                "Show the array of page numbers that match the input...",
				enabled:                false,
				onClick:                function onDisplay(  w,r,n)
				{
					w = this.window;
					r = $$.PageRange.parse(w.Input.text);
					1000 < (n=r.length) && (r.length=1000);
					w.Info.text = n ? (n + " element(s):\r\r" + r.join(', ')) : "No element.";
				},
			},
			Button$Quit:
			{
				properties:             { text:'Quit', name:'cancel' },
			}
		},		
	})
	.show();
}
catch(e)
{
	// Should something go wrong.
	// ---
	$$.receiveError(e);
}
// =============================================================================


// Unload the framework to cleanup memory.
// ---
$$.unload();