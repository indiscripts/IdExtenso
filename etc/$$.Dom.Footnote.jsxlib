/*******************************************************************************

		Name:           Footnote
		Desc:           Provide access to footnote 'numerals.'
		Path:           /etc/$$.Dom.Footnote.jsxlib
		Require:        ---
		Encoding:       ÛȚF8
		Core:           NO
		Kind:           Module.
		API:            =getNumeral() onLoad()
		DOM-access:     YES
		Todo:           More tests and NOTICE
		Created:        201209 (YYMMDD)
		Modified:       220526 (YYMMDD)

*******************************************************************************/

;$$.Dom.hasOwnProperty('Footnote') || eval(__(MODULE, $$.Dom.toSource(), 'Footnote', 220526, 'getNumeral'))

	//==========================================================================
	// BACKGROUND
	//==========================================================================

	/*

	ROMAN NUMERALS

	In InDesign, roman numerals are valid up to 3999 (`MMMCMXCIX`). From then,
	4000 is coded `MMMM`, 5000 is coded `VM`, and any number beyond is coded
	using the formula:
	
	      Roman(x) = Roman(x\1000) + `M` + Roman(x%1000)
	E.g   Roman(15936) = Roman(15) + `M` + Roman(936) = `XV` + `M` + `CMXXXVI`
	
	Within the [4000..4999] interval, the formula is
	
	      Roman(x) = `MMMM` + Roman(x%4000)
	E.g   Roman(4732) = `MMMM` + Roman(732) = `MMMM` + `DCCXXXII`

	[REM] The option UPPER_ROMAN leads to I, II, III, IV...
	      while LOWER_ROMAN leads to i, ii, iii, iv, etc

	*/

	//==========================================================================
	// COMMON ENUMERATION AND TOOLS
	//==========================================================================

	#include 'Dom.FootEndnote/$$.common.jsxinc'

	//==========================================================================
	// FOOTNOTE ENUMS AND DATA
	//==========================================================================

	[PRIVATE]

	({
		RS2S : eval(FootnoteRestarting.revSource()),   // {1180988019:"DONT_RESTART", 1181774451:"PAGE_RESTART", 1181053555:"SECTION_RESTART", 1181971059:"SPREAD_RESTART"}
		
		// Footnote restart option map (0|1|2|3)
		// ---
		RSTA :
		{
			DONT_RESTART:              0,
			PAGE_RESTART:              1,
			SECTION_RESTART:           2,
			SPREAD_RESTART:            3,
		},
		
		// Cached footnote data per document  ::  { docSpec => <dataStr>, 0_docSpec =>{}, 1_docSpec=>{}, ... }
		// where <dataStr>    :: <ALGO><X1><RSTA><X1><PFSF><X1><StartAt><X1><Prefix><X1><Suffix><X1><Separator>
		//                         0         1         2           3           4           5            6
		// where <ALGO>       :: one of the ALGO keys (4 characters)
		//       <RSTA>       :: '0' | '1' | '2' | '3'  ; cf ~.RSTA
		//       <PFSF>       :: '0' | '1' | '2' | '3'  ; cf ~.PFSF
		//       <StartAt>    :: `uint`
		//       <Prefix>     :: str
		//       <Suffix>     :: str
		//       <Separator>  :: str
		// [REM] Details about <i>_docSpec keys are explained in the code.
		// ---
		DOCS: {/*docSpec => dataStr, 0_docSpec=>{}, 1_docSpec=>{}, ...*/},
	})

	//==========================================================================
	// GET RELATIVE INDEX: FID1, FID2, FID3, FIDX
	//==========================================================================

	[PRIVATE]
	
	({
		RID1: function(/*Footnote*/t)
		//----------------------------------
		// (Relative-Page-ID.)
		// => uint > 0 [OK]  |  false [KO]
		{
			return t.isValid && (t=t.characters[0]).isValid &&
				0 < (t=t.parentTextFrames).length &&
				(callee.PAGE(t[0]).id||false);
		}
		.setup
		({
			PAGE: $$.Dom.parentPage,
		}),

		RID2: function(/*Footnote*/t)
		//----------------------------------
		// (Relative-Section-ID.)
		// => uint > 0 [OK]  |  false [KO]
		{
			return t.isValid && (t=t.characters[0]).isValid &&
				0 < (t=t.parentTextFrames).length &&
				((callee.PAGE(t[0]).appliedSection||0).id||false);
		}
		.setup
		({
			PAGE: $$.Dom.parentPage,
		}),

		RID3: function(/*Footnote*/t)
		//----------------------------------
		// (Relative-Spread-ID.)
		// => uint > 0 [OK]  |  false [KO]
		{
			return t.isValid && (t=t.characters[0]).isValid &&
				0 < (t=t.parentTextFrames).length &&
				(callee.SPRD(t[0]).id||false);
		}
		.setup
		({
			SPRD: $$.Dom.parentSpread,
		}),

		FIDX : function(/*Footnote*/fn,/*{_stoId=>fnId[]+{_fnId=>index}}&*/Q0,/*{_fnId=>xId}&*/QX,/*'1'|'2'|'3'*/X,  x,sto,K,a,RX,k,id,i)
		//----------------------------------
		// (Relative-Footnote-Index.) Return the 0-based index of this footnote
		// relative to its page, spread, or section.
		// Cache Q0 :: { _storyID => fnId[]+{_fnId=>index} }
		// Cache QX :: { _fnId => (pg|spd|sec)Id }
		// this :: ~
		// ---
		// => uint [OK]  |  false [KO]
		{
			x = this.NIND(fn,Q0);                                     // Absolute index

			sto = fn.parent;                                          // Story
			K = sto.footnotes;                                        // Footnotes
			a = Q0['_' + sto.id];                                     // a :: fid[] + {_fid=>index}

			RX = this['RID'+X];                                       // RX :: footnote-to-OwnerId()
			id = QX[k='_'+a[x]] || (QX[k]=RX(fn));                    // id :: (pg|sec|spd)Id
			if( false===id ) return false;

			for
			(
				i=x ;
				i-- && id===(QX[k='_'+a[i]] || (QX[k]=RX(K.itemByID(a[i])))) ;
			);

			return x-(1+i);
		},

	})

	//==========================================================================
	// API
	//==========================================================================

	[PUBLIC]
	
	({
		onLoad: function onLoad_(  q,k)
		//----------------------------------
		// Clean up caches?
		{
		},
		
		getNumeral: function getNumeral_$Footnote$_t_b_S(/*Footnote|PluralFootnote*/fn,/*-1|0|+1=0*/format,/*bool=0*/FORCE_ARRAY,  I,D,a,i,t,k,rs,ps,Q0,x)
		//----------------------------------
		// Returns the footnote number as a string, with respect to the
		// footnoteNumberingStyle option (e.g "12", "012", "xii", etc.)
		// If `format` is falsy, the numeral is returned with no prefix/suffix.
		// If `format` is -1, apply the format of the *FN reference* (as shown
		// in the main text),
		// If `format` is +1, apply the format of the *FN marker* (as shown
		// in the footnote text.)
		// [REM] If fn is a plural footnote, this function may return an
		// array as well as a single string. Set FORCE_ARRAY to get an
		// Array in any case.
		// ---
		// => str | str[]
		{
			( fn && 'Footnote'==fn.constructor.name && fn.isValid )
			|| error(__("Invalid `fn` argument. Should be a valid Footnote."),callee);
			
			(format|=0) && (format=0>format?1:2); // format :: 00b_NO | 01b_MARK | 10b_REF
			
			I = callee.µ['~'];
			D = I.DOCS;

			a = fn.getElements();
			for( i=a.length ; i-- ; )
			{
				fn = a[i];
				(t=fn.toSpecifier()) && (t=t.slice(0,t.indexOf('//')));
				
				if( !D.hasOwnProperty(k='_'+t) )
				{
					t = resolve(t); // Document
					t.isValid || error(__("Invalid document associated to footnote %1.",fn.toSpecifier()),callee);

					t = t.footnoteOptions.properties;
					D[k] = (I.ALGO[I.NS2S[+t.footnoteNumberingStyle]]||'ARAB') +
						'\x01' + (I.RSTA[I.RS2S[+t.restartNumbering]]||'0') +
						'\x01' + (I.PFSF[I.PS2S[+t.showPrefixSuffix]]||'0') +
						'\x01' + t.startAt +
						'\x01' + t.prefix +
						'\x01' + t.suffix +
						'\x01' + t.separatorText;
					
					D['0'+k] = {/* _stoId => fid[] + {_fid=>index} */};
					D['1'+k] = {/* _fId => pgId  */};
					D['2'+k] = {/* _fId => secId */};
					D['3'+k] = {/* _fId => spdId */};
				}

				// E.g "LROM<X1>0<X1>0<X1>123<X1>MyPrefix<X1>MySuffix<X1>\t"
				//  -> ["LROM", "0", "0", "123", "MyPrefix", "MySuffix", "\t" ]
				//        0      1    2     3         4           5       6
				// ---
				t = D[k].split('\x01');

				Q0 = D['0'+k];
				rs = t[1]; // '0' | '1' | '2' | '3'
				x = '0'===rs ? I.NIND(fn,Q0) : I.FIDX(fn,Q0,D[rs+k],rs);
				
				x = false!==x && I[t[0]](x + 1*t[3]);

				format && x.length && (t[2]&format)         // t[2] :: 0_NO_PREFIX_SUFFIX | 1_PREFIX_SUFFIX_MARKER | 2_PREFIX_SUFFIX_REFERENCE | 3_PREFIX_SUFFIX_BOTH
				&& (x=t[4]+x+t[5]);

				a[i] = x;
			}
			
			return (FORCE_ARRAY || 1 < a.length) ? a : a[0];
		},

	})

