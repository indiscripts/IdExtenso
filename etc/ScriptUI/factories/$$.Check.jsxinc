/*******************************************************************************

		Name:           Check(Factory)
		Desc:           Consistent checkbox allowing a 3rd, 'unspecified' state.
		Path:           /etc/ScriptUI/factories/$$.Check.jsxinc
		Require:        ScriptUI/factories ; ScriptUI.builder ; ScriptUI/events [recommended]
		Encoding:       ÛȚF8
		Core:           NO
		Kind:           Snippet
		API:            ScriptUI.CheckFactory()
		DOM-access:     NO
		Todo:           ---
		Created:        180909 (YYMMDD)
		Modified:       220523 (YYMMDD)

*******************************************************************************/

	//==========================================================================
	// NOTICE
	//==========================================================================
	
	/*
	
	CheckFactory provides a CS/CC-consistent checkbox with a label. You can either
	define a regular, two-state checkbox (ON/OFF), or a three-state control
	supporting a special 'unspecified' mode.

	      +---------------------------------------+
	      ¦ +===+   +--------------------+        ¦
	      ¦ | √ |   ¦  <one-line-label>  ¦        ¦
	      ¦ +===+   +--------------------+        ¦
	      +---------------------------------------+

	Example in ScriptUI.builder:

	      CheckFactory$MyCheck:
	      [{
	          text:    "Hidden layers",                // caption (text)
	          help:    "Scan hidden layers.",          // helpTip
	          value:   1,                              // initial value (0|1|-1)
	          ternary: true                            // three-state mode
	      }],

	Shortcut for caption setting:

	      CheckFactory$MyCheck:["Hidden layers"],


	API
	=======================================================================
	properties      obj = { kind: "Check", Ternary:bool, Radio:bool,
	                        CustomBox:bool }
	                Information properties.
	-----------------------------------------------------------------------
	value           0|1|-1 = 0
	                Getter & setter that turns the control OFF (0) or ON (1).
	                In ternary mode, the control also supports the value -1,
	                meaning unspecified.
	-----------------------------------------------------------------------
	text            str = ""
	                Label of the checkbox (getter and setter). The underlying
	                statictext is dynamically adjusted.
	-----------------------------------------------------------------------
	helpTip         str = ""
	                Help message (getter and setter).
	=======================================================================
	onClickChange   fct( ev[[clicked]] ) = undef
	                Called back when the custom 'clicked' event has occured.
	                This mechanism is more stable than a 'click' listener:
	                it reacts *once* per click and ignore RIGHT mouse button.
	                [REM] The 'clicked' event also occurs when the user
	                      presses the [SPACE] key.
	-----------------------------------------------------------------------
	onRightClick    fct( ev[[rclicked]] ) = undef
	                Called back when the custom 'rclicked' event (right-click)
	                has occured.
	-----------------------------------------------------------------------
	onEvent         fct(ev) = undef
	                Called back when any of the following events has occured:
	                clicked | rclicked
	=======================================================================
	setValue(nv)    => nv
	                Equivalent to { this.value=nv; return this.value; }
	-----------------------------------------------------------------------
	getValue()      => (0|1|-1)
	                Equivalent to { return this.value; }
	-----------------------------------------------------------------------
	getControl()    => Checkbox
	                Return the inner Checkbox.
	-----------------------------------------------------------------------
	cycle()         => nv
	                Change the value and update the control without firing
	                'clicked' event. Might be used to cycle the values of a
	                ternary box. Cycle order: 0 --> 1 --> -1 --> 0  etc
	-----------------------------------------------------------------------
	popup(s,c,t)    => undef
	                Shortcut for sending a popup event in automatic mode.
	                If no Popup component is available, this method has no
	                effect.
	=======================================================================

	*/

	;if( $$.isBooting() )
	//----------------------------------
	// This condition is required for persistent engines.
	{
		ScriptUI.CheckFactory = function Check(/*container*/parent,/*str|{text,help,value,ternary...}*/ops,  V,CB,r)
		//----------------------------------
		// Options (ops):
		// .text       (str='')     Text of the checkbox.
		// .helpTip    (str='')     Help tip (`help` can be supplied as an alias.)
		// .value      (tee=0)      0:uncheked 1:checked -1:unspecified. (Bool supported.)
		// .ternary    (bool=auto)  Whether the unspecified state is supported.
		// .radio      (bool=0)     Whether the shape has to be circular (experimental.)
		// ---
		// .customBox  (bool=auto)  Use custom checkbox (onDraw), forced in ternary and/or radio case.
		// .optWidth   (uint=120)   Optimal width (in px)
		// .optHeight  (uint=23)    Optimal height (in px)
		// .spacing    (uint=4)     Space b/w checkbox and caption
		// ---
		// .onClickChange (?fct)    'clicked' handler.
		// .onRightClick  (?fct)    'rclicked' handler.
		// .onEvent       (?fct)    Any event handler.
		// ---
		// .enabled | .visible      States.
		// ---
		// => Group[[Check]]   ::   G(C,S)
		//   .properties       ::   { kind, Ternary, CustomBox }
		{
			// Normalize options.
			// ---
			'string' == typeof ops && (ops={text:ops});
			ops && ops.help && !ops.helpTip && (ops.helpTip=ops.help);     // helpTip alias (help)
			ops = ScriptUI.factoryOptions(ops,callee.DEFS);                // defaults
			V = ops.value = ops.value < 0 ? -1 : 1*(0!=ops.value);         // -1|0|1
			V < 0 && (ops.ternary=true);
			(ops.ternary||ops.radio) && (ops.customBox=true);
			CB = ops.customBox;

			// Create the component.
			// ---
			r = ScriptUI.builder
			(
				{
					// --- Layout.
					margins:                ops.margins||0,
					spacing:                ops.spacing,
					orientation:            'row',
					alignChildren:          ScriptUI.LB,
					optimalSize:
					{
						width:              ops.optWidth,
						height:             ops.optHeight,
					},
					// --- Watched.
					value:                  V,
					text:                   ops.text,
					helpTip:                ops.helpTip,
					onClickChange:          void 0,
					onRightClick:           void 0,
					onEvent:                void 0,
					// --- Inner events.
					_mousedown_mouseup:     callee.HMOU,
					// --- Private
					__mouseDetails__:       '', // [ADD220520]
					// --- Public methods.
					setValue:               callee.SETV,
					getValue:               callee.GETV,
					getControl:             callee.CTRL, // ret. the main component
					cycle:                  callee.CYCL,
					popup:                  ScriptUI.POPU, // noop if Popup unavailable.
					// --- Components.
					Checkbox$0:
					{
						properties:         { text:'' },
						//alignment:          ScriptUI.LC,
						__minus__:          0 > V,
						__circle__:         ops.radio,
						value:              !!V,
						_mousedown:         ops.ignoreClick ? void 0 : callee.HDWN, // [ADD220520] Only for registering the MouseEvent props
						onClick:            callee.HMOU,
						onDraw:             CB ? callee.HDRW : void 0,
						optimalSize:        CB ? callee.HDRW.SIZE : { height:14 },
						maximumSize:        CB ? callee.HDRW.SIZE : void 0,
						_blur:              callee.HBLU,
					},
					StaticText$1:
					{
						properties:         { text:ops.text },
					},
				},
				parent.add( 'group', void 0, callee.CREA(ops) )
			);

			// Watcher.
			// ---
			ScriptUI.setWatcher
			(
				r,
				['value', 'text', 'helpTip', 'onClickChange', 'onRightClick', 'onEvent'],
				callee.WTCH,
				ops
			);

			// [ADD210821] States.
			// ---
			( false===ops.enabled || 0===ops.enabled ) && (r.enabled=false);
			( false===ops.visible || 0===ops.visible ) && (r.visible=false);

			return r;
		}
		.setup
		//----------------------------------
		// Parameters, tools.
		//----------------------------------
		({
			DEFS:
			{
				text:         '',
				helpTip:      '',
				value:        0,
				ternary:      false,
				radio:        false,
				// ---
				customBox:    true,     // use custom checkbox (onDraw)
				optWidth:     120,      // default check width (in px)
				optHeight:    23,       // default check height (in px)
				spacing:      4,        // space b/w checkbox and caption
				// ---
				onClickChange: void 0,
				onRightClick:  void 0,
				onEvent:       void 0,
			},
			
			CREA: function(/*{}*/ops)
			//----------------------------------
			// this :: ScriptUI.CheckFactory
			// => new {}  ; properties object
			{
				return {
					kind:          this.name,
					// ---
					Ternary:       ops.ternary,
					Radio:         ops.radio,
					CustomBox:     ops.customBox,
				};
			},
		})
		.setup
		//----------------------------------
		// Inner events.
		//----------------------------------
		({
			HDRW: function onDrawCheckbox(/*DrawState*/DS,  gx,k,t)
			//----------------------------------
			// onDraw callback of the inner Checkbox.
			// this  :: Checkbox
			{
				if( (!this.visible) || !(gx=this.graphics) ) return;
				k = this.enabled ? ((DS.mouseOver ? 'X':'C') + (DS.hasFocus ? 'FOC':'NRM')) : 'CDSB';

				t = gx.newPen(0,callee[k],1);
				gx.newPath();
				this.__circle__
				? gx.ellipsePath.apply(gx,callee.BCIR)
				: gx.rectPath.apply(gx,callee.BREC);
				gx.strokePath(t);
				
				if( !this.value ) return;
				
				t = gx.newBrush(0,callee[k]);
				gx.newPath();
				this.__circle__
				? gx.ellipsePath.apply(gx,callee.FCIR)
				: gx.rectPath.apply(gx, this.__minus__ ? callee.MINU : callee.FREC);
				gx.fillPath(t);
			}
			.setup
			({
				SIZE: { width:16, height:14 },
				// --- Paths
				BREC: [2,2, 10,10],                           // Rectangular border
				FREC: $$.inCS ? [5,5, 5,5]   : [5,5, 4,4],    // Rectangular fill
				MINU: $$.inCS ? [5,7, 5,1]   : [5,7, 4,1],    // Minus (rectangular)
				// ---
				BCIR: $$.inCS ? [2,2, 11,11] : [1,1, 12,12],  // Circular border
				FCIR: $$.inCS ? [4,4, 7,7]   : [5,5, 4,4],    // Circular fill
				// --- Colors
				CDSB: $$.isDark ? [.4,.4,.4,  1]    : [.7,.7,.7,  1],
				CNRM: $$.isDark ? [.75,.75,.75,  1] : [.35,.35,.35,  1],
				XNRM: $$.isDark ? [.9,.9,.9,  1]    : [.2,.2,.2,  1],
				CFOC: [.3,.6,.9,  1],
				XFOC: [.35,.65,.95,  1],
			}),

			// [FIX210122] In CC most widgets have an obscure focus/blur
			// sequence that may keep them 'active' while losing the focus.
			// Forcing this.active to false seems to solve the pb.
			// ---
			HBLU: $$.inCC && function onBlurCheckbox(){ this.active=false },

			HDWN: function onMouseDown(/*mousedown*/ev)
			//----------------------------------
			// [ADD220520] This extra handler *only* registers essential mouse details.
			// It is used by HMOU to recreate an informed event when necessary.
			// Sets the `__mouseDetails__` private prop (str), structure:
			// `<ctrlKey>|<altKey>|<shiftKey>|<metaKey>|<button>|<screenX>|<screenY>|<clientX>|<clientY>`
			// all stringified from their numeric value (booleans being coerced into '0' or '1'.)
			// ---
			// this   :: Inner Checkbox
			// ev     :: mousedown
			// target :: this | Checkbox
			// => undef
			{
				ev.target===this && (this.parent.__mouseDetails__ =
				[
					(0|ev.ctrlKey),
					(0|ev.altKey),
					(0|ev.shiftKey),
					(0|ev.metaKey),
					// ---
					(0|ev.button),
					(0|ev.screenX),
					(0|ev.screenY),
					(0|ev.clientX),
					(0|ev.clientY)
				].join('|'));
			},

			HMOU: function onMouse(/*?MouseEvent*/ev,  me,t,fire)
			//----------------------------------
			// Manage both CB.onClick callback AND mouse events.
			// ---
			// this   :: Group[[Check]]                  | Checkbox
			// ev     :: mousedown | mouseup             | undef (onClick handler)
			// target :: this | Checkbox | StaticText    | ---
			{
				t = this.type;
				me = 'checkbox'==t ? this.parent : this;

				if( !ev )
				{
					// CB onClick callback. This pseudo-event also
					// occurs when the user presses the [SPACE] key.
					// ---
					fire = 'checkbox'==t;
					t = (me.__mouseDetails__||'').split('|');
					ev =
					{
						base:     'M',
						ctrlKey:   '1'===t[0],
						altKey:    '1'===t[1],
						shiftKey:  '1'===t[2],
						metaKey:   '1'===t[3],
						button:    0|parseInt(t[4],10),
						screenX:   0|parseInt(t[5],10),
						screenY:   0|parseInt(t[6],10),
						clientX:   0|parseInt(t[7],10),
						clientY:   0|parseInt(t[8],10),
					};
				}
				else
				{
					ev.stopPropagation();                                       // Don't go higher.
					
					// [FIX220522] Certain OS/laptops treat Ctrl+Click as RightClick
					// and forcibly set `ev.button` to 2. Since we want to detect Ctrl+Click
					// separately, it is necessary to exclude `ev.ctrlKey==true` below.
					// ---
					if( (t=ev.button) && !(ev.ctrlKey && 2==t) )                // Catch non-LEFT button.
					{
						ev.preventDefault();                                    // Inhibit.

						'mousedown'==ev.type
						&& 2 == t                                               // RIGHT button
						&& (this===ev.target||callee.EV_PHASE==ev.eventPhase)   // 'bubble' is allowed in CS
						&& ScriptUI.dispatch(this,'rclicked',ev);               // Notify 'rclicked'

						return;
					}

					// Since CB onClick callback is treated separately,
					// we are now addressing left mousedown/up sequence
					// outside the CB area. This means:
					// - in CS:  ev.target !== CB
					// - in CC:  ev.target === this && <firstTarget> !== CB
					//           where firstTarget can be determined using a timer.
					// ---
					// [REM] In CC mouse events are re-targeted toward the parent so
					// we have to ignore events fired at the control level. But CC's
					// Checkbox also blocks any event we would expect after mousedown,
					// so we cannot manage the sequence CB[mousedown] + NonCB[mouseup]

					t = 'mousedown' == ev.type
					? -( ev.target && callee.CAN_STAMP(ev.target,this) && new Date ) // Stamp:  0 | <0
					: +( 500 > +new Date + (this.__stamp__||0) );                    // OK-Up:  0 | +1  (<500ms)
					
					0 > t ? (this.__stamp__=t) : delete this.__stamp__;              // Arm vs. delete the timer.

					fire = 1 == t;
				}

				if( fire )
				{
					t = me.cycle();                                             // Change value and redraw.
					ScriptUI.setFocus(me.getControl());                         // Forcibly focus the box.
					ScriptUI.dispatch(me,'clicked',ev||0);                      // Notify 'clicked' to listeners.
				}
			}
			.setup
			({
				EV_PHASE : $.inCC ? 'BREAK' : 'bubble',

				CAN_STAMP : $.inCC ?
				//----------------------------------
				function(tg,me)
				{
					return 'checkbox' == tg.type ?
						( (callee.TM=+new Date), false ) :
						( tg===me && 100 < (+new Date - (callee.TM||0)) );
				}:
				function(tg)
				{
					return 'checkbox' != tg.type;
				},
			}),

		})
		.setup
		//----------------------------------
		// Watcher.
		//----------------------------------
		({
			WTCH: function watcher(/*str*/k,/*any*/ov,/*any*/nv)
			//----------------------------------
			// this   :: Group[[Check]]
			//    k   :: value | text | helpTip
			//           onClickChange | onRightClick | onEvent
			{
				if( this.hasOwnProperty('µ_'+k) ) return nv; // Temporary transparent key.

				var t,a;
				switch( k )
				{
					case 'value': // 0 | 1 | -1
						( nv|=0 ) && ( nv = 0 > nv && this.properties.Ternary ? -1 : 1 );
						t = this.children[0];
						t.__minus__ = 0 > nv;
						t.value=!!nv;
						t.hide(),t.show(); // Refresh needed.
						break;

					case 'text': // str
						nv = String(nv);
						if( nv==(t=this.children[1]).text ) break;
						(a=t.graphics) && (a=a.measureString(nv));
						a && (t.size=a, t.parent.layout.layout(1)); //[FIX220215] .layout(1) seems more reliable than .resize()
						t.text = nv;
						break;

					case 'helpTip': // str
						nv = String(nv||'');
						a = this.children;
						a[0].helpTip = a[1].helpTip = nv;
						break;

					case 'onClickChange': // fct
						ScriptUI.callback(this,'clicked',ov,nv);
						break;

					case 'onRightClick': // fct
						ScriptUI.callback(this,'rclicked',ov,nv);
						break;

					case 'onEvent': // fct
						ScriptUI.callback(this,['clicked','rclicked'],ov,nv);
						break;

					default:;
				}
				return nv;
			},
		})
		.setup
		//----------------------------------
		// Public.
		//----------------------------------
		({
			SETV: function setValue(nv){ return (this.value=nv), this.value },
			GETV: function getValue(  ){ return this.value },
			CTRL: function getControl(){ return this.children[0] },

			CYCL: function cycle(  ov,nv)
			//----------------------------------
			// Change the value and update the view.
			// this   :: Group[[Check]]
			// => nv
			{
				ov = this.value;
				
				nv = this.properties.Ternary
				? ( ov ? -(0 < ov) : 1 )
				: ( ov ? 0 : 1 );
				
				return this.setValue(nv);
			},

		});

	}