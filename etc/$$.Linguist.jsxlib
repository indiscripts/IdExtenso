/*******************************************************************************

		Name:           Linguist
		Desc:           Language data and linguistics. (Yalt highly recommended.)
		Path:           /etc/$$.Linguist.jsxlib
		Require:        ---
		Encoding:       ÛȚF8
		Core:           NO
		Kind:           Module.
		API:            =getIso() getData()
		DOM-access:     YES (app.languagesWithVendors, app.findKeyStrings)
		Todo:           isoToLanguage [needed?]
		Created:        170424 (YYMMDD)
		Modified:       220415 (YYMMDD)

*******************************************************************************/

;$$.hasOwnProperty('Linguist') || eval(__(MODULE, $$, 'Linguist', 220415, 'getIso'))

	//==========================================================================
	// NOTICE
	//==========================================================================
	
	/*
	
		This module is a central place for addressing language and locale data.
		Its main component (~.LISO) maps ISO639-1 codes to an info structure
		that tells which name, scripting system, family... an ISO key is
		associated to.
		
		A YALT package is provided for translating language names from EN into
		FR, DE, SP, IT, or RU.
		
		For the time being, Linguist basically consists in datasets and only
		exposes a multi-purpose `getData` method. It is used by meta-modules
		such as MetaCollator.

	*/

	[PRIVATE]

	({
		YALT : $$.Yalt && $$.Yalt.addPackage
		(
		#include 'Linguist/$$.yalt.jsxres'
		),

		// ISO639-1 Subset.
		// key ([a-z_]{2,}) => { wp:int, name:str, sc:str4, fm:str3, natv:str, [wk:str,] [alias:str,] }
		// E.g 'br' => { wp: 3, name: "Breton", sc: "Latn", fm: "INE", natv: "Brezhoneg" }
		// ---
		LISO :
		{
		#include 'Linguist/$$.LISO.jsxres'
		},

		// Set of Language Families.
		// key (3 chars) => str (display name)
		// E.g:  'AFA' => "Afro-Asiatic"
		// ---
		LFAM :
		{
		#include 'Linguist/$$.LFAM.jsxres'
		},

		// Set of Writing Systems.
		// key (4 chars) => { name:str, dir:'L2R'|'R2L'|'VAR', ranges: [u24,u24][] }
		// E.g: 'Armn' : { name:"Armenian", dir:"L2R", ranges: [ [0x530,0x58F],[0xFB00,0xFB17] ] }
		// ---
		WSYS :
		{
		#include 'Linguist/$$.WSYS.jsxres'
		},

	})

	//==========================================================================
	// INDESIGN AND EXTENDSCRIPT AXES
	//==========================================================================

	[PRIVATE]
	
	({
		// Used by ~.IDLG
		// [CHG220415] Separate resource file.
		LNGS:
		{
		#include 'Linguist/$$.LNGS.jsxres'
		},

		IDLO : function(/*?-1|-2|uint|LocaleEnum|str*/loc,/*?-1|-2|str*/iso,  o,q,k)
		//----------------------------------
		// (InDesign-Locales.) Generic INDD-Locale from/to ISO converter.
		// (a) If `loc` is truthy, get the corresponding iso (if any), or return undef.
		//     loc can be supplied as locale name (e.g `FINNISH`), Locale enum or Locale ID.
		//     If loc == -1, return the LOC2ISO map.
		//     If loc == -2, return the LOCREG regex capturing any mapped locale name.
		// (b) If `iso` is truthy, get the corresponding Locale (if any), or return undef.
		//     If iso == -1, return the ISO2LOC map.
		//     If iso == -2, return the ISOREG regex capturing any mapped LISO key.
		// ---
		// => str | Locale [OK]  |  undef [KO]
		//  | {locName=>iso}& | {iso=>locName}& | RegExp
		{
			if( loc )
			{
				o = callee.LOC2ISO;
				if( -1==loc ) return o;
				if( -2==loc )
				{
					if( q=callee.LOCREG ) return q;
					q = '';
					for( k in o ) o.hasOwnProperty(k) && (q+='|'+k);
					return (callee.LOCREG=RegExp('^(?:'+q.slice(1)+')(?:_LOCALE)?$', 'i'));
				}
				'string'==typeof loc || (loc=$.global[callee.µ.__root__].Env.localeIdToString(+loc));
				return loc ? o[loc.toUpperCase()] : void 0;
			}
			
			if( !(o=callee.ISO2LOC) )
			{
				o = {};
				q = callee.LOC2ISO;
				for( k in q ) q.hasOwnProperty(k) && (o[q[k]]=k);
				callee.ISO2LOC = o;
			}

			if( -1==iso ) return o;
			if( -2==iso )
			{
				if( q=callee.ISOREG ) return q;
				q = '';
				for( k in o ) o.hasOwnProperty(k) && (q+='|'+k);
				return (callee.ISOREG=RegExp('^(?:'+q.slice(1)+')$', 'i'));
			}
			
			return 'string' == typeof iso ? o[iso.toLowerCase()] : void 0;
		
		}.setup
		({
			LOC2ISO:
			// Set of InDesign locales with associated LISO codes.
			// ---
			{
				ARABIC                 : 'ar',
				CZECH                  : 'cs',
				DANISH                 : 'da',
				ENGLISH                : 'en',
				FINNISH                : 'fi',
				FRENCH                 : 'fr',
				GERMAN                 : 'de',
				GREEK                  : 'el',
				HEBREW                 : 'he',
				HUNGARIAN              : 'hu',
				INTERNATIONAL_ENGLISH  : 'en_simple',
				ITALIAN                : 'it',
				JAPANESE               : 'ja',
				KOREAN                 : 'ko',
				POLISH                 : 'pl',
				PORTUGUESE             : 'pt',
				ROMANIAN               : 'ro',
				RUSSIAN                : 'ru',
				SIMPLIFIED_CHINESE     : 'zh_simple',
				SPANISH                : 'es',
				SWEDISH                : 'sv',
				TRADITIONAL_CHINESE    : 'zh',
				TURKISH                : 'tr',
				UKRAINIAN              : 'uk',
			},
		}),

		IDLG : function(/*?Language|LanguageWithVendors|str*/lng,/*?str*/iso,  o,q,L,k,t,oo,s)
		//----------------------------------
		// (InDesign-Languages.) Generic INDD-Language from/to ISO converter.
		// (a) If `lng` is truthy, get the corresponding iso (if any), or return undef.
		//     lng can be supplied as a Language instance or name (either EN or localized.)
		// (b) If `iso` is truthy, get the closest Language (if any), or return undef.
		// ---
		// this :: ~
		// => str | Language|LanguageWithVendors [OK]  |  undef [KO]
		{
			if( lng )
			{
				o = this.LNGS; // [CHG220415]
				q = this.CAPS;

				if( 'string' == typeof lng )
				{
					if( o.hasOwnProperty(lng) ) return o[lng].icu.slice(0,2);
					if( q.hasOwnProperty(L=lng.toUpperCase()) ) return q[L];
					(t=app.languagesWithVendors.itemByName(lng)).isValid && (lng=t);
				}

				if( lng instanceof Language || lng instanceof LanguageWithVendors )
				{
					if( !lng.isValid ) return;
					lng = lng.getElements()[0];
					if( k=lng.properties.icuLocaleName )
					{
						// CS5+
						// ---
						k = k.slice(0,2);
						return this.LISO.hasOwnProperty(k) ? k : void 0;
					}

					// CS4 workaround
					// ---
					lng = lng.properties.name;
					if( !lng ) return;
				}

				lng = String(lng);
				L = lng.toUpperCase();
				
				// In case `lng` is already EN-localized, or in cache.
				// ---
				if( o.hasOwnProperty(lng) ) return o[lng].icu.slice(0,2);
				if( q.hasOwnProperty(L) ) return q[L];
				
				// Extract ID keystrings (time-consuming.)
				// ---
				s = '$ID/'==lng.slice(0,3) ? lng : $.global[callee.µ.__root__].fromLocaleStr(lng);
				if( !s ) return;
				for( k in o )
				{
					if( !o.hasOwnProperty(k) ) continue;
					if( !(t=(oo=o[k]).fks) ) continue;
					t = '$ID' + __(t,k);
					if( -1 == s.indexOf(t) ) continue;
					return (q[L]=oo.icu.slice(0,2));
				}
				
				// Failed.
				// ---
				return;
			}
			
			if( iso )
			{
				o = this.LISO;
				if( !o.hasOwnProperty(iso) ) return;
				if( !(s=o[iso].indd) ) return;
				t = app.languageWithVendors.itemByName(s);
				return t.isValid ? t : void 0;
			}

		},

		// Registered ExtendScript languages.
		// ---
		ESLG : "af ar az be bg ca cs da de el en es et eu fa fi fo fr he hi " +
		       "hr hu hy id is it ja ka kk ko ky lt lv mk ms mt nb nl no pl " +
		       "pt ro ru se sk sl sq sr sv sw th tn tr uk ur vi xh zh zu",

	})

	//==========================================================================
	// EXTRAS
	//==========================================================================

	[PRIVATE]

	({
		// Maps capitalized names to LISO keys.
		// 'ARABIC' => 'ar', 'EGYPTIAN ARABIC' => 'arz', 'FRENCH' => 'fr', etc
		// (This map can be augmented by ~.IDLG.)
		// ---
		CAPS : (function(o,k,r,s){r={};for(k in o)(s=(o[k]||0).name)&&(r[s.toUpperCase()]=k);return r})(µ['~'].LISO),
		
		YCHK : function(  $$,f,o,z,k,t)
		//----------------------------------
		// (Yalt-Check.) Check that all LISO names are present in Yalt package.
		// `this` :: ~
		// => 1 [OK]  |  0 [KO]
		{
			$$ = $.global[callee.µ.__root__]; // agnostic reference
			
			f = $$.Yalt;
			if( !f ) return 0;

			f = f.hasKey;
			o = this.LISO;
			z = 0;
			for( k in o )
			{
				t = o[k].name;
				f(t) || ( ++z, $$.trace( __("%1 (%2) => KO", k, t) ) );
			}
			
			return z ? 0 : 1;
		},

	})

	//==========================================================================
	// API
	//==========================================================================

	[PUBLIC]

	({
		getIso: function getIso_x_S$false$(/*?str|LocaleEnum|uint|Language|LanguageWithVendors|Text*/x,  I,r)
		//----------------------------------
		// Given a string (Locale/Language name), Locale enumerator/id, or Language instance,
		// return the corresponding LISO key. If `x` is a DOM object having an `appliedLanguage`
		// property, consider that Language. If x is missing or falsey, consider the app locale.
		// Language names are recognized in either localized or English form (InDesign's DOM
		// commands return the localized form.) You can also use the `$ID/...` syntax.
		// [REM] In InDesign, `appliedLanguage` has a unique value even if the Text range
		// contains various languages (the 1st character is probably considered.) The client code
		// should dig further, using e.g `myText.textStyleRanges.everyItem().appliedLanguage` etc
		// ---
		// E.g  getIso()                            => 'fr'         ; assuming InDesign locale is FRENCH
		//      getIso(0x4c43436e)                  => 'zh_simple'  ; cf Locale.SIMPLIFIED_CHINESE_LOCALE
		//      getIso("Suédois")                   => 'sv'         ; assuming InDesign locale is FRENCH
		//      getIso("Spanish")                   => 'es'         ; in whatever locale
		//      getIso("Dutch: Old Rules")          => 'nl'         ; in whatever locale
		//      getIso("$ID/de_CH_2006")            => 'de'         ; in whatever locale
		//      getIso("INTERNATIONAL_ENGLISH")     => 'en_simple'  ; Locale keyname (suffix is not required)
		//      getIso("samogitian")                => 'sgs'        ; based on LISO name (case-insensitive)
		//      getIso(app.languagesWithVendors[0]) => 'en'         ; since [No Language] is associated to en_US
		//      getIso(<myTextObject>)              => 'fi'         ; if myTextObject.appliedLanguage is Finnish
		//      getIso(12345)                       =>  false       ; no match
		// ---
		// => str [OK]  |  false [KO]
		{
			I = callee.µ['~'];

			x && x.hasOwnProperty('appliedLanguage') && (x=x.properties.appliedLanguage||'');
			x || (x=$.global[callee.µ.__root__].Env.appLocaleId);

			r = (x instanceof Language || x instanceof LanguageWithVendors)
			? I.IDLG(x)
			: I.IDLO(x) || I.IDLG(x);
			
			return r || false;
		},
		
		getData: function getData_õsa$RegExp$_s_b_OA(/*obj|str|str[]|RegExp=auto*/filters,/*str=auto*/outKeys,/*0|1=0*/RET_ARR,  FF,mn,mx,fk,t,CV,uik,ret,z,KS,k,data,skip,i)
		//----------------------------------
		// Extract filtered data from the internal database (~.LISO). Returns either a new set, or a new array,
		// depending on the `RET_ARR` flag (default:zero.) If supplied, the string `outKeys` tells which props
		// have to be reported, e.g "name|system|family". Allowed outkeys: key, name, wk, alias, indd, native,
		// system, family, spread. Each returned element is a new object based on the desired properties. If a
		// single property is requested, the element is coerced into a string.
		// `filters` (obj | str | str[] | RegExp) specifies one or several conditions.
		// 1. If `filters` is not an object, the filter is assumed to be applied to the `keys` ;
		//    E.g "fr|en|it" will extract the corresponding elements.
		// 2. If `filters` is an object, it can supply a set of conditions, based on the following structure:
		//    .keys       str | str[] | RegExp
		//    .names      str | str[] | RegExp
		//    .systems    str | str[] | RegExp
		//    .families   str | str[] | RegExp
		//    .minSpread  0 | 1 | 2 | 3 | 4
		//    .maxSpread  0 | 1 | 2 | 3 | 4
		//    .idlo       true                 ; requires a matching InDesign Locale
		//    .indd       true                 ; requires a matching InDesign Language   [TODO]
		//    .estk       true                 ; requires a matching ExtendScript locale [TODO]
		//    All conditions must then be satisfied to keep an element in the output structure.
		//
		// Filters of the type String will have a `xxx|yyy|...` form; filters of the type
		// Array are converted into string using `.join('|')`; finally any filter of that
		// kind is interpreted as a regular expression (if not supplied as such.)
		// Example: { names:/^A.*/, families:'INE|AFA', minSpread:2 }
		// ---
		// => SET|SEQ  [OK]  |  false [KO-NoElemFound]
		{
			// Normalize filters -> FF
			// ---
			filters || (filters={});
			if( (filters instanceof RegExp) || (filters instanceof Array) || (filters!==Object(filters)) ) filters = { keys: filters };
			FF = {};
			mn = mx = false;
			for( fk in filters )
			{
				if( !filters.hasOwnProperty(fk) ) continue;
				t = filters[fk];
				switch( fk )
				{
					case 'keys':      (t=callee.MKRE(t)) && (FF['']=t);     break;
					case 'names':     (t=callee.MKRE(t)) && (FF['name']=t); break;
					case 'systems':   (t=callee.MKRE(t)) && (FF['sc']=t);   break;
					case 'families':  (t=callee.MKRE(t)) && (FF['fm']=t);   break;
					case 'minSpread':  t===(t>>>0) && 0 <= t && 4 >= t && (mn=t); break;
					case 'maxSpread':  t===(t>>>0) && 0 <= t && 4 >= t && (mx=t); break;
					case 'idlo':       t && (FF['idlo']=callee.µ['~'].IDLO(0,-2));
					case 'indd':       break; // [TODO]
					case 'estk':       break; // [TODO]
					default:;
				}
			}
			if( false!==mn || false!==mx )
			{
				false===mn ? (mn=0) : ( false===mx && (mx=4) );
				for( t='' ; mn <= mx ; (t+=mn), ++mn );
				t.length && (FF['wp']=RegExp("^["+t+"]"));
			}
			
			// Normalize outKeys.
			// ---
			CV = callee.CONV;
			outKeys = String(outKeys||'name|system|family|spread').split(/\|/g);
			for( i=outKeys.length ; i-- ; CV.hasOwnProperty(outKeys[i]) || outKeys.splice(i,1) );
			uik = 1 >= outKeys.length && (outKeys[0]||'name');

			// Output structure.
			// ---
			ret = RET_ARR ? [] : {};
			z = RET_ARR ? 0 : void 0;
			
			// Main loop.
			// ---
			KS = callee.µ['~'].LISO;
			for( k in KS )
			{
				if( !KS.hasOwnProperty(k) ) continue;
				data = KS[k];
				skip = 0;
				for( fk in FF )
				{
					if( !FF.hasOwnProperty(fk) ) continue;
					t = fk && CV[fk] ? data[fk] : k;
					if( !FF[fk].test(t||'') ){ skip=1; break; }
				}
				if( skip ) continue;
				if( uik )
				{
					ret[ RET_ARR ? z++ : k] = 'key'==uik ? k : data[CV[uik]];
					continue;
				}
				t = ret[ RET_ARR ? z++ : k] = {};
				for( i=-1 ; ++i < outKeys.length ; (fk=outKeys[i]) && t[fk]='key'==fk ? k : data[CV[fk]] );
			}

			return ret[RET_ARR ? 'length' : '__count__'] ? ret : false;
		}
		.setup
		({
			CONV:
			{
				'key'    : 'key',
				// ---
				'name'   : 'name',
				'sc'     : 'sc',
				'fm'     : 'fm',
				'wp'     : 'wp',
				'wk'     : 'wk',
				'alias'  : 'alias',
				'natv'   : 'natv',
				'indd'   : 'indd',
				// ---
				'system' : 'sc',
				'family' : 'fm',
				'spread' : 'wp',
				'native' : 'natv',
			},
			
			MKRE: function(/*any*/x)
			//----------------------------------
			// => RegExp [OK]  |  0 [KO]
			{
				if( !x ) return 0;
				if( x instanceof RegExp ) return x;
				x = (x instanceof Array ? x.join('|') : String(x)).trim();
				if( !x.length ) return 0;
				'^'==x.charAt(0) || (x="^(?:"+x+")");
				return RegExp(x, 'i');
			},
		}),
	})