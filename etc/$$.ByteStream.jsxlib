/*******************************************************************************

		Name:           ByteStream
		Desc:           Manage a byte stream (for either input or output.)
		Path:           /etc/$$.ByteStream.jsxlib
		Require:        Ext/
		Encoding:       ÛȚF8
		Core:           NO
		Kind:           Class.
		API:            onEngine()
		       [proto]  create() valueOf() getSource() toString() toSource()
		                peek() read() jump() write()
		                + Array.prototype
		DOM-access:     NO
		Todo:           ---
		Created:        180927 (YYMMDD)
		Modified:       200420 (YYMMDD)

*******************************************************************************/

;$$.hasOwnProperty('ByteStream') || eval(__(CLASS, $$, 'ByteStream', 200420))

	//==========================================================================
	// NOTICE
	//==========================================================================
	
	/*

	The present class makes it easy to read or write a stream of bytes (8-bit
	codes.) Its main purpose is to handle binary data stored in files.
	Input streams are supplied in either Array or String form, output
	streams are managed in Array form--but you can use `this.toString()` to get
	the corresponding string.

	- To create an input stream, use `new ByteStream(input)`, where `input` is
	  either an Array of bytes, or a String of byte codes. The stream instance
	  will then support the `peek()` and `read()` methods.
	
	- To create an output stream, just use `new ByteStream()` with no argument.
	  The stream instance will then support the `write()` method.

	This module performs conversions between JS values and various byte-encoded
	structures (signed and unsigned char, short, long, float, etc.), in either
	Big-Endian (BE) or Little-Endian (LE) order.

	[REM] In big-endian format (BE) the most significant byte is stored
	      or sent first. This is the default order.

	As suggested in <github.com/pgriess/node-jspack>, format strings are used
	as compact descriptions of the structures to be encoded or decoded. For
	example, `myInputStream.read("ASC U16 F32", myDestArr)` will load in the
	destination array three decoded items: one ascii character (1 byte),
	one unsigned short integer (2 bytes), and one float32 (4 bytes.)

	Here are the supported encodings so far:
	
	  Tag  | Bytes | JS Type   | Description
	-----------------------------------------------------------------------
	  STR  |   n   | string(n) | Raw string based on n bytes.
	-----------------------------------------------------------------------
	  ASC  |   1   | string(1) | Ascii character ; char code <= 0x7F
	  LAT  |   1   | string(1) | Latin character ; char code <= 0xFF
	  HEX  |   1   | string(2) | Hex string (2 chars) ; e.g  0x1F -> "1F"
	  TAG  |   4   | string(4) | OTF or Adobe tag, i.e string of 4 Ascii chars  [ADD200420]
	-----------------------------------------------------------------------
	  I08  |   1   | number    | Signed byte     [-128, 127 ]
	  U08  |   1   | number    | Unsigned byte   [   0, 255 ]
	  I16  |   2   | number    | Signed short    [-32768, 32767 ]
	  U16  |   2   | number    | Unsigned short  [     0, 65535 ]
	  I24  |   3   | number    | Signed int24    [-0x800000, 0x7FFFFF ]
	  U24  |   3   | number    | Unsigned int24  [        0, 0xFFFFFF ]
	  I32  |   4   | number    | Signed long     [-0x80000000, 0x7FFFFFFF ]
	  U32  |   4   | number    | Unsigned long   [          0, 0xFFFFFFFF ]
	-----------------------------------------------------------------------
	  F32  |   4   | number*   | Float  (32bits) ; IEEE754-32
	  F64  |   8   | number    | Double (64bits) ; IEEE754-64
	
	* Since JS doesn't natively support 32-bit floats, whenever a float
	  is stored the source number must be rounded. See the IEEE754_32
	  routines in Ext/$$.number for implementation detail.

	A format string specifies a sequence of one or several 'encoding schemes'
	separated by a space character:
	
	      <FORMAT_STRING> := <ENCODING_SHEME>(` `<ENCODING_SCHEME>)*

	Each encoding scheme specifies one encoding tag followed by optional
	parameters for byte ordering, count, and key assignment:
	
	      <ENCODING_SCHEME> := <ENC_TAG><ORDER>?(`*`<COUNT>)?(`:`<KEY>)?
	
	where
	
	      <ENC_TAG> is one of the defined encoding tags
	      ("STR", "ASC", etc.)

	      <ORDER> is either `>` for Big-Endian, `<` for Little-
	      Endian, or empty (BE is assumed.)
	      
	      <COUNT> is a sequence of decimal digits that determines
	      the number of elements to read or write. For example,
	      `U16*3` indicates that three unsigned shorts have to
	      be processed.
	      
	      <KEY> is a property name to read from or to write to.
	      For example, `F64:value` indicates that a double has to
	      be loaded from the `value` key (while writing the stream),
	      or loaded in the `value` key (while reading the stream.)
	
	When no <KEY> is provided, data are sequentially loaded from/to using
	automatic indices. Input streams load data in `this` (which behave as
	an Array) unless a destination object is provided while calling the
	`peek()` or `read()` methods. Output streams get data from the 2nd
	argument of the `write()` method.
	
	Examples:
	
	      iStream.read("U16 F32*2")
	      --------------------------------------------------
	      Read a long and two floats from the byte stream,
	      then push the 3 values in the `this` array.

	      iStream.read("U16 F32*2", dest)
	      --------------------------------------------------
	      Read a long and two floats from the byte stream,
	      then push the 3 values in `dest`.

	      oStream.write("U16 F32*2", source)
	      --------------------------------------------------
	      Write a long and two floats in the byte stream,
	      getting values from source[0], source[1] and source[2].

	      iStream.read("U16:count F32*2")
	      --------------------------------------------------
	      Read a long and two floats from the byte stream,
	      store the long as `this.count`, and push the two
	      float numbers in the `this` array.

	      iStream.read("U16:count F32*2", dest)
	      --------------------------------------------------
	      Read a long and two floats from the byte stream,
	      store the long as `dest.count`, and push the two
	      float numbers in `dest`.

	      oStream.write("U16:count F32*2", source)
	      --------------------------------------------------
	      Write a long and two floats in the byte stream,
	      getting the long from `source.count` and the
	      float numbers from source[0] and source[1].

	The API allows (and assumes) that the destination or source argument
	is either a simple Array, a key-value Object, or a mixed type
	combining Array and Object features. However, *pushing* data in the
	`dest` object can only work as expected if it is an instance of Array.
	If it is not, the keys '0', '1', '2'... will be re-used at each
	reading stage. Also, while writing an output stream from a source
	object which is an Array instance, data are processed from index 0
	at each writing stage.
	
	[REM] In case the `source` argument is a scalar, the `write` method
	consider it an array of one element, so `oStream.write("F64", 12.345)`
	still works fine.

	<COUNT> and <KEY> parameters can be combined. In such case, `obj[key]`
	is treated as a sub-array for loading data from/to. For example,

	      iStream.read("U08*3:rgb", dest)
	      --------------------------------------------------
	      Read three integers from the byte stream and
	      store the values in dest.rgb[0], dest.rgb[1],
	      dest.rgb[2]. If dest.rgb doesn't exist, the
	      array is created.
	
	Note, in the above example, that the values are *not pushed* in
	`dest.rgb` when the array already exists, the initial index is always
	reset to zero.

	Similarly,

	      oStream.write("U08*3:rgb", source)
	      --------------------------------------------------
	      Write three bytes from `source.rgb[0]`,
	      `source.rgb[1]` and `source.rgb[2]`.

	It is the responsability of the client code to supply a `source`
	object that fits the format string. Whenever data cannot be found
	as specified, zero bytes (0x00) are sent to the stream.
	

	SPECIAL CASE: `STR`
	
	The `STR` tag allows to quickly handle fixed length strings. The scheme
	`STR*nn` is then interpreted so it loads a single string formed of `nn`
	characters (rather than an array of `nn` single-character strings.)
	
	`iStream.read("STR*10:name", dest)` will read and load a string
	of 10 characters in dest.name.
	
	`oStream.write("STR*10", "hello")` will write 10 bytes, five bytes from
	`hello` and five zero bytes. Note that `write("STR*3", "hello")`
	would truncate the string to its three fist characters.
	
	[REM] When <COUNT> is missing, the `write` method automatically
	considers the actual string length. For example, `write("STR", "hello")`
	will exactly write 5 bytes. (With an empty string, no write is performed.)
	By contrast, `read("STR",dest)` just reads a *single character*, as would
	do "STR*1".

	*/

	//==========================================================================
	// TOOLS
	//==========================================================================

	[PRIVATE]

	({
		
		GETA: function(/*byte[]*/a,/*uint*/p)
		//----------------------------------
		// (Get-Byte-from-Array.)
		// => byte
		{
			return 0xFF&a[p];
		},
		
		GETS: function(/*str*/s,/*uint*/p)
		//----------------------------------
		// (Get-Byte-from-String.)
		// => byte
		{
			return 0xFF&s.charCodeAt(p);
		},

		BYBE: function(/*byte[]&*/q,/*uint*/x,/*2..4*/n,  i)
		//----------------------------------
		// (Set-Bytes-Big-Endian.)
		// => q
		{
			for( --n, i=-1 ; ++i <= n ; q[i]=0xFF&(x>>>(8*(n-i))) );
			return q;
		},
		
		BYLE: function(/*byte[]&*/q,/*uint*/x,/*2..4*/n,  i)
		//----------------------------------
		// (Set-Bytes-Little-Endian.)
		// => q
		{
			for( i=-1 ; ++i < n ; q[i]=0xFF&(x>>>(8*i)) );
			return q;
		},
	})

	//==========================================================================
	// ENCODERS / DECODERS
	//==========================================================================

	[PRIVATE]

	({

		// Encoding schemes.
		// [ADD200420] Added `TAG` encoding (OTF tag, i.e ASC*4)
		// ---
		ENCS: /(STR|ASC|TAG|LAT|HEX|I08|U08|I16|U16|I24|U24|I32|U32|F32|F64)([><])?(\*\d+)?(\:[^ ]+)?/g,

		RSTR: function(/*byte[]|str*/a,/*uint*/p)
		//----------------------------------
		// Interprets a[p] and next bytes as raw string codepoints.
		// `callee.MERGE` (set by the caller) determines the slice.
		// => str
		{
			a = a.slice(p, p+callee.MERGE);
			return 'string'==typeof a ? a : String.fromCharCode.apply(0,a);
		}
		.setup({ SZ:1, MERGE:1 }),

		WSTR: function(/*str*/x,  a,i)
		//----------------------------------
		// Given a string of length n, return a sequence of n bytes.
		// If callee.LENGTH is provided, use it as the result length.
		// => byte[n]
		{
			for( a=Array(i=callee.LENGTH||x.length) ; i-- ; a[i]=0xFF&x.charCodeAt(i) );
			return a;
		}
		.setup({ LENGTH:0 }),

		RASC: function(/*byte[]|str*/a,/*uint*/p,/*fct*/f)
		//----------------------------------
		// Interprets a[p] as an ascii char.
		// => char
		{
			return String.fromCharCode(0x7F&f(a,p));
		}
		.setup({ SZ:1 }),

		WASC: function(/*char=\x00*/x)
		//----------------------------------
		// Given an ascii char, return a volatile sequence of 1 byte.
		// => byte[1]  [VOLATILE]
		{
			return (callee.Q[0]=0x7F&x.charCodeAt(0)), callee.Q;
		}
		.setup({ Q: Array(1) }),

		RTAG: function(/*byte[]|str*/a,/*uint*/p,/*fct*/f)
		//----------------------------------
		// [ADD200420] Interprets a[p]..a[p+3] as an OTF tag (=ASC*4).
		// => str4
		{
			return String.fromCharCode(0x7F&f(a,p),0x7F&f(a,1+p),0x7F&f(a,2+p),0x7F&f(a,3+p));
		}
		.setup({ SZ:4 }),

		WTAG: function(/*str=\x00\x00\x00\x00*/x,  q)
		//----------------------------------
		// [ADD200420] Given an OTF tag string (=ASC*4), return a VOLATILE sequence of 4 bytes.
		// => byte[4]  [VOLATILE]
		{
			return (q=callee.Q), (q[0]=0x7F&x.charCodeAt(0)), (q[1]=0x7F&x.charCodeAt(1)), (q[2]=0x7F&x.charCodeAt(2)), (q[3]=0x7F&x.charCodeAt(3)), q;
		}
		.setup({ Q: Array(4) }),

		RLAT: function(/*byte[]|str*/a,/*uint*/p,/*fct*/f)
		//----------------------------------
		// Interprets a[p] as a latin char.
		// => char
		{
			return String.fromCharCode(0xFF&f(a,p));
		}
		.setup({ SZ: 1 }),

		WLAT: function(/*char=\x00*/x)
		//----------------------------------
		// Given a latin char, return a volatile sequence of 1 byte.
		// => byte[1]  [VOLATILE]
		{
			return (callee.Q[0]=0xFF&x.charCodeAt(0)), callee.Q;
		}
		.setup({ Q: Array(1) }),

		RHEX: function(/*byte[]|str*/a,/*uint*/p,/*fct*/f)
		//----------------------------------
		// Interprets a[p] as an hex string of 2 digits.
		// => str
		{
			return ('0'+(0xFF&f(a,p)).toString(16)).substr(-2);
		}
		.setup({ SZ: 1 }),

		WHEX: function(/*hex='00'*/x)
		//----------------------------------
		// Given an hex of 2 digits, return a volatile sequence of 1 byte.
		// => byte[1]  [VOLATILE]
		{
			return (callee.Q[0]=0xFF&parseInt(x,16)), callee.Q;
		}
		.setup({ Q: Array(1) }),

		RI08: function(/*byte[]|str*/a,/*uint*/p,/*fct*/f)
		//----------------------------------
		// Interprets a[p] as a signed byte.
		// => int8   [-0xFF,+0x7F]
		{
			return ( 0x80&(p=f(a,p)) ) ? -(0x100-p) : p;
		}
		.setup({ SZ: 1 }),

		WI08: function(/*int8=0*/x)
		//----------------------------------
		// Given a signed int8, return a volatile sequence of 1 byte.
		// => byte[1]  [VOLATILE]
		{
			return this.WU08( 0 > (x|=0) ? (0x80|x) : x );
		},

		RU08: function(/*byte[]|str*/a,/*uint*/p,/*fct*/f)
		//----------------------------------
		// Interprets a[p] as an unsigned byte.
		// => uint8  [0,0xFF]
		{
			return f(a,p);
		}
		.setup({ SZ: 1 }),

		WU08: function(/*uint8=0*/x)
		//----------------------------------
		// Given an uint8, return a volatile sequence of 1 byte.
		// => byte[1]  [VOLATILE]
		{
			return (callee.Q[0]=0xFF&x), callee.Q;
		}
		.setup({ Q: Array(1) }),

		RI16: function(/*byte[]|str*/a,/*uint*/p,/*fct*/f,/*bool*/LE)
		//----------------------------------
		// Interprets (a[p],a[1+p]) as a signed integer.
		// => int16   [-0xFFFF,+0x7FFF]
		{
			return ( 0x8000&(p=this.RU16(a,p,f,LE)) ) ? (0xFFFF0000|p) : p;
		}
		.setup({ SZ: 2 }),

		WI16: function(/*int16=0*/x,/*bool*/LE)
		//----------------------------------
		// Given a signed int16, return a volatile sequence of 2 bytes.
		// => byte[2]  [VOLATILE]
		{
			return this.WU16( 0 > (x|=0) ? (0x8000|x) : x );
		},

		RU16: function(/*byte[]|str*/a,/*uint*/p,/*fct*/f,/*bool*/LE)
		//----------------------------------
		// Interprets (a[p],a[1+p]) as an unsigned integer.
		// => uint16  [0,0xFFFF]
		{
			return LE ?
				( (f(a,1+p)<<8) | f(a,p) ):
				( (f(a,p)<<8) | f(a,1+p) );
		}
		.setup({ SZ: 2 }),

		WU16: function(/*uint16=0*/x,/*bool*/LE)
		//----------------------------------
		// Given an uint16, return a volatile sequence of 2 bytes.
		// => byte[2]  [VOLATILE]
		{
			return this[LE?'BYLE':'BYBE'](callee.Q,0|x,2);
		}
		.setup({ Q: Array(2) }),

		RI24: function(/*byte[]|str*/a,/*uint*/p,/*fct*/f,/*bool*/LE)
		//----------------------------------
		// Interprets (a[p],a[1+p],a[2+p]) as a signed int24.
		// => int24   [-0xFFFFFF,+0x7FFFFF]
		{
			return ( 0x800000&(p=this.RU24(a,p,f,LE)) ) ? (0xFF000000|p) : p;
		}
		.setup({ SZ: 3 }),

		WI24: function(/*int24=0*/x,/*bool*/LE)
		//----------------------------------
		// Given a signed int24, return a volatile sequence of 3 bytes.
		// => byte[3]  [VOLATILE]
		{
			return this.WU24( 0 > (x|=0) ? (0x800000|x) : x );
		},

		RU24: function(/*byte[]|str*/a,/*uint*/p,/*fct*/f,/*bool*/LE)
		//----------------------------------
		// Interprets (a[p],a[1+p],a[2+p]) as an unsigned int24.
		// => uint24  [0,0xFFFFFF]
		{
			return LE ?
				( (f(a,2+p)<<16) | (f(a,1+p)<<8) | f(a,p) ):
				( (f(a,p)<<16) | (f(a,1+p)<<8) | f(a,2+p) );
		}
		.setup({ SZ: 3 }),

		WU24: function(/*uint24=0*/x,/*bool*/LE)
		//----------------------------------
		// Given an uint24, return a volatile sequence of 3 bytes.
		// => byte[3]  [VOLATILE]
		{
			return this[LE?'BYLE':'BYBE'](callee.Q,x||0,3);
		}
		.setup({ Q: Array(3) }),

		RI32: function(/*byte[]|str*/a,/*uint*/p,/*fct*/f,/*bool*/LE)
		//----------------------------------
		// Interprets (a[p],a[1+p],a[2+p],a[3+p]) as a signed long.
		// => int32   [-0xFFFFFFFF,+0x7FFFFFFF]
		{
			return LE ?
				( (f(a,3+p)<<24) | (f(a,2+p)<<16) | (f(a,1+p)<<8) | f(a,p) ):
				( (f(a,p)<<24) | (f(a,1+p)<<16) | (f(a,2+p)<<8) | f(a,3+p) );
		}
		.setup({ SZ: 4 }),

		WI32: function(/*int32=0*/x,/*bool*/LE)
		//----------------------------------
		// Given a signed long, return a volatile sequence of 4 bytes.
		// => byte[4]  [VOLATILE]
		{
			return this.WU32(x,LE);
		},

		RU32: function(/*byte[]|str*/a,/*uint*/p,/*fct*/f,/*bool*/LE)
		//----------------------------------
		// Interprets (a[p],a[1+p],a[2+p],a[3+p]) as an unsigned long.
		// => uint32  [0,0xFFFFFFFF]
		{
			return this.RI32(a,p,f,LE) >>> 0;
		}
		.setup({ SZ: 4 }),

		WU32: function(/*uint32=0*/x,/*bool*/LE)
		//----------------------------------
		// Given an unsigned long, return a volatile sequence of 4 bytes.
		// => byte[4]  [VOLATILE]
		{
			return this[LE?'BYLE':'BYBE'](callee.Q,x||0,4);
		}
		.setup({ Q: Array(4) }),

		RF32: function(/*byte[]|str*/a,/*uint*/p,/*fct*/f,/*bool*/LE)
		//----------------------------------
		// Interprets (a[p],a[1+p],a[2+p],a[3+p]) as a float32 (IEEE754 representation.)
		// => float32
		{
			return Number.fromIEEE754_32( this.RU32(a,p,f,LE).toString(16) );
		}
		.setup({ SZ: 4 }),

		WF32: function(/*flo32=0*/x,/*bool*/LE)
		//----------------------------------
		// Given a float32, return a volatile sequence of
		// 4 bytes carrying its IEEE754-32 representation.
		// => byte[4]  [VOLATILE]
		{
			return this[LE?'BYLE':'BYBE'](callee.Q,Number('0x'+(x||0).toIEEE754_32()),4);
		}
		.setup({ Q: Array(4) }),

		RF64: function(/*byte[]|str*/a,/*uint*/p,/*fct*/f,/*bool*/LE,  t)
		//----------------------------------
		// Interprets (a[p],a[1+p],...,a[7+p]) as a float64 (IEEE754 representation.)
		// => float64
		{
			t = ( '00000000'+this.RU32(a, LE?p:(4+p), f, LE).toString(16) ).substr(-8);
			return Number.fromIEEE754( this.RU32(a, LE?(4+p):p, f, LE).toString(16) + t );
		}
		.setup({ SZ: 8 }),

		WF64: function(/*flo64=0*/x,/*bool*/LE,  q,i,p)
		//----------------------------------
		// Given a float64, return a volatile sequence of
		// 8 bytes carrying its IEEE754 representation.
		// => byte[8]  [VOLATILE]
		{
			x = (x||0).toIEEE754(); // 16 characters ; e.g "405EDD2F1A9FBE77"
			for( q=callee.Q, i=-1 ; ++i < 8 ; (p=2*i), (LE&&(p=14-p)), q[i]=Number('0x'+x.substr(p,2)) );
			return q;
		}
		.setup({ Q: Array(8) }),

	})

	[STATIC]
	
	({

		onEngine: function onEngine_()
		//----------------------------------
		// Makes BS instances behave as Array instances.
		{
			callee.µ.prototype.__proto__ = Array.prototype;
		},

	})

	//==========================================================================
	// API
	//==========================================================================

	[PROTO]
	
	({
		create: function create_as_(/*byte[]|str*/source)
		//----------------------------------
		// Constructor. Create an input stream if `source` is supplied (and non-empty),
		// otherwise creates an output stream. The `source` arg can be either an array
		// or a string.
		{
			this.__val__ = void 0;

			if( (source||0).length && ('string'==typeof source || Object(source)===source ) )
			{
				// Input stream.
				// ---
				this.__pos__ = 0;
				this.__src__ = source;
				this.write = void 0;
			}
			else
			{
				// Output stream.
				// ---
				this.peek = this.read = void 0;
			}
		},
		
		getSource: function getSource_AS$false$()
		//----------------------------------
		// [181123] [INPUT STREAM]  Get the source of this input stream.
		// [OUTPUT STREAM] Return false.
		// => byte[]  |  str  |  false
		{
			return this.hasOwnProperty('__src__') && this.__src__;
		},
		
		valueOf: function valueOf_X()
		//----------------------------------
		// Return the latest processed value.
		// => any
		{
			return this.__val__;
		},

		toString: function toString_i_S(/*uint=auto*/last)
		//----------------------------------
		// [INPUT STREAM]  Return String(this.valueOf()).
		// [OUTPUT STREAM] Return the byte stream as a string.
		// [181123] If `last` is provided, only return `last` characters from the end.
		// ---
		// => str
		{
			last = (last === (last>>>0)) && (-last);
			return this.hasOwnProperty('__pos__')
				? ( last ? String(this.valueOf()).slice(last) : String(this.valueOf()) )
				: ( String.fromCharCode.apply(0, last ? this.slice(last) : this) );
		},
		
		toSource: function toSource_S()
		//----------------------------------
		// [ADD200420] Uneval the stream.
		// [INPUT STREAM]  Return `(new $$["ByteStream"](<src>.toSource()))`.
		// [OUTPUT STREAM] Return this.toString().toSource()
		// ---
		// => str
		{
			return this.hasOwnProperty('__src__') ?
				__( "(new %1(%2))",callee.µ.toSource(),this.__src__.toSource() ) :
				this.toString().toSource();
		},

		peek: function peek_s_oa_$this$(/*str=U08*/fmt,/*obj|arr=this&*/dst,  I,i,src,f,p,re,m,F,dp,LE,n,k,v,o,j)
		//----------------------------------
		// [INPUT STREAM ONLY] Read the bytes associated to `fmt` without increasing the
		// internal pointer. If `dst` is supplied, load the data here; use `this` otherw.
		// ---
		// `fmt` :: Space-separated encoding schemes, where each scheme
		//    has the form <ENC>(`>`|`<`)?(`*`<COUNT>)?(`:`<KEY>)?
		//    <ENC>       :: 'ASC' | 'LAT' | 'I08' | etc
		//    `>` vs. `<` :: (opt.) Big-Endian vs. Little-Endian (BE by default.)
		//    `*`<COUNT>  :: (opt.) Number of values to extract in that specific
		//                   encoding; e.g `U16*3` means three uint16. Data are
		//                   sequentially pushed in `dst[len]`, `dst[1+len]`...,
		//                   or `dst[k][0]`, `dst[k][1]` if a KEY is provided.
		//                   If <COUNT>==0, the data is read but not saved in `dst`.
		//    `:`<KEY>    :: (opt.) Destination key. By default, data are loaded
		//                   in `dst` using automatic indexing. Use the `:`<KEY>
		//                   syntax to assign an explicit key.
		// Examples:
		//   "U16 ASC F64"   Load an uint16, an ascii char, and a double in dst[0],
		//                   dst[1], dst[2].
		//   "I16<*5"        Load five signed int16, LE-encoded, in dst[0]..dst[5].
		//   "F32:myFloat"   Load a float32 in `dst.myFloat`.
		//   "F64*2:coords"  Load two doubles in `dst.coords[0]` and `dst.coords[1]`.
		// (More examples in the NOTICE.)
		// ---
		// => this
		{
			I = callee.µ['~'];

			'undefined' == typeof fmt && (fmt='U08');
			dst===Object(dst) || (dst=this);
			i = dst.length||0;

			f = I['string' == typeof(src=this.__src__) ? 'GETS' : 'GETA'];

			for( v=void 0, p=this.__pos__, (re=I.ENCS).lastIndex=0 ; m=re.exec(fmt) ; )
			{
				dp = (F=I['R'+m[1]]).SZ;
				LE = '<'===m[2];
				n = (n=m[3]) ? parseInt(n.substr(1),10) : false;
				k = (k=m[4]) ? k.substr(1) : false;
				if( !n )
				{
					F.MERGE && (F.MERGE=1);
					v = F.call(I,src,p,f,LE);
					p += dp;
					false===n && (dst[false===k ? i++ : k]=v);
					continue;
				}
				if( false===k )
				{
					o = dst;
					j = i;
				}
				else
				{
					o = dst[k]||(dst[k]=[]);
					j = 0;
				}

				F.MERGE && ((dp*=(F.MERGE=n)),(n=1));
				for( ; n-- ; (o[j++]=v=F.call(I,src,p,f,LE)), p+=dp );
				false===k && (i=j);
			}

			return (callee.POS=p), (this.__val__=v), this;
		}
		.setup({ POS:0 }),

		read: function read_si_oa_$this$(/*str|uint=1*/fmt,/*obj|arr=this&*/dst,  p,v,n,i)
		//----------------------------------
		// [INPUT STREAM ONLY] Read the bytes associated to `fmt` and increment the
		// internal pointer accordingly. If `dst` is supplied, load the data here;
		// use `this` otherw.
		// Special case: if `fmt` is a number, read `fmt` bytes and store the result
		// as a byte string in `this.__val__`. In addition, if `dst` is an Array
		// instance, push the read bytes into `dst`.
		// `fmt` :: Space-separated encoding schemes, as detailed in `peek()`
		// ---
		// => this
		{
			if( 'string'==typeof fmt )
			{
				this.peek(fmt,dst);
				this.__pos__ = this.peek.POS;
			}
			else
			{
				(fmt>>>=0)||(fmt=1);
				p = this.__pos__;
				v = this.__src__.slice(p,p+fmt);

				this.__val__ = 'string'==typeof v ? v : String.fromCharCode.apply(0,v);
				while( dst && dst instanceof Array )
				{
					if( v instanceof Array ){ Array.push.apply(dst,v); break; }
					for( n=v.length, i=-1 ; ++i < n ; dst.push(0xFF&v.charCodeAt(i)) );
					break;
				}
				
				this.__pos__ = p+fmt;
			}
			return this;
		},

		jump: function jump_I_$this$(/*uint32*/dp,  z)
		//----------------------------------
		// [INPUT STREAM]  Skip dp bytes.
		// [OUTPUT STREAM] Feed dp bytes with \x00.
		// ---
		// => this
		{
			dp >>>= 0;

			if( this.hasOwnProperty('__pos__') )
			{
				this.__pos__ += dp;
			}
			else
			{
				for( z=this.length ; dp-- ; this[z++]=0 );
			}
			return this;
		},

		write: function write_S_X_$this$(/*str=U08*/fmt,/*any*/data,  I,P,i,v,re,m,F,LE,n,k,o,j)
		//----------------------------------
		// [OUTPUT STREAM ONLY] Write the bytes associated to `fmt` at the end of the
		// stream, using `data` as the source.
		// `fmt`  :: Space-separated encoding schemes, as detailed in `peek()`
		// `data` :: Value or set of values matching the encoding scheme(s).
		// ---
		// => this
		{
			I = callee.µ['~'];
			P = Array.prototype.push;
			
			data===Object(data) || ((callee.Q[0]=data),(data=callee.Q));
			'undefined' == typeof fmt && (fmt='U08');

			i = 0;
			for( v=void 0, (re=I.ENCS).lastIndex=0 ; m=re.exec(fmt) ; )
			{
				F = I['W'+m[1]];
				F.LENGTH && (F.LENGTH=0); // automatic length for string
				LE = '<'===m[2];
				n = (n=m[3]) ? parseInt(n.substr(1),10) : false;
				k = (k=m[4]) ? k.substr(1) : false;
				if( !n )
				{
					v = data[false===k ? i++ : k];
					false===n && P.apply(this,F.call(I,v,LE));
					continue;
				}
				if( false===k )
				{
					o = data;
					j = i;
				}
				else
				{
					o = data[k];
					o===Object(o) || (o=[o]);
					j = 0;
				}

				F.hasOwnProperty('LENGTH') && ((dp*=(F.LENGTH=n)),(n=1));
				for( ; n-- ; P.apply(this,F.call(I,v=o[j++],LE)) );
				false===k && (i=j);
			}

			return (this.__val__=v), this;
		}
		.setup({ Q:Array(1) }),
		
	})
