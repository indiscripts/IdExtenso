/*******************************************************************************

		Name:           HTTP Secure (Win)
		Desc:           Invokes MSXML2.XMLHTTP via VBS
		Path:           /etc/Web/$$.HttpSecure.Win.jsxinc
		Require:        ---
		Encoding:       ÛȚF8
		Core:           NO
		Kind:           Snippet (part of the HttpSecure snippet.)
		API:            ---
		DOM-access:     YES (app.doScript)
		Todo:           how to manage timeout ?!?
		Created:        190321 (YYMMDD)
		Modified:       210922 (YYMMDD)

*******************************************************************************/

	//==========================================================================
	// IMPLEMENTATION NOTES
	//==========================================================================

	/*

	The present function will run on Win platforms. It executes a VBScript from
	`app.doScript()` in order to invoke XMLHTTP. This object is available in various
	locations: `MSXML2.XMLHTTP`, `MSXML2.XMLHTTP.3.0`, `MSXML2.ServerXMLHTTP.6.0` etc
	
	[REM] MSXML 3.0 requires msxml3.dll ; MSXML 6.0 requires msxml6.dll.
	
	The inner script has a specific error handler and should be verbose enough
	on failing request.

	[RES] https://msdn.microsoft.com/en-us/library/ms760305(v=vs.85).aspx

	[M$] A client computer can use the XMLHTTP object (MSXML2.XMLHTTP) to send an
	arbitrary HTTP request, receive the response, and have the XML Document Object
	Model parse that response. This object is integrated with XML Core Services
	(MSXML) to support sending the request body directly from, and parsing the
	response directly into, the MSXML DOM objects. When combined with the support
	for Extensible Stylesheet Language (XSL), XMLHTTP provides an easy way to send
	structured queries to HTTP servers and display results with a variety of
	presentations. Usual sequence is to call the open method, set any custom header
	information through the setRequestHeader method followed by the send method, and
	then to check one of the four different response properties.

	responseBody :: Represents the response entity body as an array of unsigned
	bytes, namely a SAFEARRAY of type VT_ARRAY | VT_UI1. This contains the raw
	undecoded bytes as received directly from the server. Therefore, depending on
	what the server sent, this may appear as binary-encoded data (UTF-8, UCS-2,
	UCS-4, Shift_JIS, and so on).
	
	[REM] We still try to escape `responseBody` from within the script using
	`Escape()` -- converts Unicode characters (and below) to %HH or %uHHHH,
	except for A-Z, a-z, 0-9, and _ * - . + / @. This method was temporarily
	suspected to cause issues, but it seems it was a wrong interpretation...

	responseText :: Represents only one of several forms in which the HTTP response
	can be returned. IXMLHTTP attempts to decode the response into a Unicode string.
	It assumes the default encoding is UTF-8, but can decode any type of UCS-2 (big
	or little endian) or UCS-4 encoding as long as the server sends the appropriate
	Unicode byte-order mark. It does not process the <? XML coding declaration. If
	you know the response is going to be XML, use the responseXML property for full
	XML encoding support.
	
	[REM] The batch `reg query hkcr /f xmlhttp` returns the list of available XMLHTTP
	classes in Windows, typically

	      HKEY_CLASSES_ROOT\Microsoft.XMLHTTP
	      HKEY_CLASSES_ROOT\Microsoft.XMLHTTP.1.0
	      HKEY_CLASSES_ROOT\Msxml2.ServerXMLHTTP
	      HKEY_CLASSES_ROOT\Msxml2.ServerXMLHTTP.3.0
	      HKEY_CLASSES_ROOT\Msxml2.ServerXMLHTTP.4.0
	      HKEY_CLASSES_ROOT\Msxml2.ServerXMLHTTP.5.0
	      HKEY_CLASSES_ROOT\Msxml2.ServerXMLHTTP.6.0
	      HKEY_CLASSES_ROOT\Msxml2.XMLHTTP
	      HKEY_CLASSES_ROOT\Msxml2.XMLHTTP.3.0
	      HKEY_CLASSES_ROOT\Msxml2.XMLHTTP.4.0
	      HKEY_CLASSES_ROOT\Msxml2.XMLHTTP.5.0
	      HKEY_CLASSES_ROOT\Msxml2.XMLHTTP.6.0
	      End of search: 12 match(es) found.	

	[RES] Other resources:
	- stackoverflow.com/questions/24863986/vbscript-msxml12-xmlhttp-error-handling
	- https://ss64.com/vb/onerror.html
	- microsoft.public.scripting.vbscript.narkive.com/oM8TRLwB/running-wscript-in-html
	- developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest
	- github.com/grefel/restix/blob/master/restix.jsx
	- markohoven.com/2020/03/06/msxml2-serverxmlhttp-and-tls1-2/
	- groups.google.com/g/microsoft.public.scripting.vbscript/c/gcRHn578td4?pli=1
	
	See also: https://github.com/indiscripts/IdExtenso/issues/4

	*/

	function HSEC_WIN(/*{status,statusCode,headers,data,?error}&*/resp,/*{host,port,location,wantText,delay}*/target,/*?$$.Log.trace*/T,  S,sa,err,k,v,a)
	// -------------------------------------
	// (Http-Secure-Getter-Win.) Access the `target` via HTTPS and save the results
	// in the object `resp`. This getter for Windows tries to access the target using
	// the `XMLHTTP` object via VBScript.
	// [REM210922] The `status` property (in the returned `resp` structure) can be empty
	// even if the request was successfully addressed (HTTP2). The client code shouldn't
	// reject such result.
	// ---
	// `resp`   :: Reference that will receive the results (reset by the caller.)
	//             Structure: { status:str, statusCode:uint, data:str,
	//                          headers:{}, ?error:str }
	// `target` :: Object that provides the following keys:
	//             - source    :: (str)  Full valid uri.
	//             - wantText  :: (0|1)  Whether text is expected.
	//             - delay     :: (uint) Timeout, in sec. [TODO]
	//             - host      :: (str)  Not used here.
	//             - port      :: (str)  Not used here.
	//             - location  :: (str)  Not used here.
	// ---
	// => +1 [OK]  |  -2 [any-error]
	{
		// Create the script (code string.)
		// ---
		S = callee.SCPT(target);
		T && T( __("%1 > About to run from app.doScript the following VBScript:\r%2", 'Web', S) );

		// Run it.
		// ---
		try
		{
			(sa=app.scriptArgs).clear();
			resp.data = app.doScript(S, callee.LANG); // 0 | str
			
			err = sa.getValue(k='error')||'';
			sa.setValue(k,'');
			err.length || resp.data.length || (err="Access is probably not allowed.");
		}
		catch(e)
		{
			resp.data = '';
			err = e.description;
		}

		if( err.length )
		{
			resp.error = __("No result from XMLHTTP: %1", err);
			return -2;
		}

		// Need to unEscape string into binary data?
		// ---
		if( resp.data.length && !target.wantText )
		{
			T && T( __("%1 > Unescape string (size=%2) into binary (UTF16)...", 'Web', resp.data.length) );
			resp.data = callee.UESC(resp.data);
		}

		// All is fine.
		// ---
		delete resp.error;

		v = sa.getValue(k='status')||'';
		sa.setValue(k,'');
		resp[k] = v;

		v = 0|parseInt(sa.getValue(k='statusCode'),10);
		sa.setValue(k,'');
		resp[k] = v;

		a = (sa.getValue(k='headers')||'').trim().split(RegExp.LINEs);
		sa.setValue(k,'');
		while( v=a.shift() )
		{
			k = (v=v.split(':')).shift().trim();
			resp.headers[k] = (v=v.join(':').trim());
			T && T(__("%1 > HTTP Header %2: %3.",callee.µ,k,v.toSource()));
		}
		
		return 1;
	}
	.setup
	({
		LANG: +ScriptLanguage.VISUAL_BASIC,
		
		SCPT: function(/*{source,wantText,delay}*/target,  uriSafe)
		//----------------------------------
		// Build and return the VBS script ready to run.
		// [CHG210202] Redesigned ; use `returnValue` -> data.
		// `responseBody` -> array of "undecoded bytes as received
		// directly from the server."
		// `responseText` -> "Unicode string" which "attempts to
		// decode the response" assuming UTF-8 default encoding
		// "but can decode any type of UCS-2 or UCS-4 encoding"
		// [FIX210922] Added a fake user agent via `SetRequestHeader`
		// fixing #issue004 ; cf stackoverflow.com/questions/42400945/
		// wrong-http-code-returned-using-msxml2-serverxmlhttp-6-0
		// ---
		// => str  [VBS-Code]
		{
			// (?) 'MSXML2.XMLHTTP' seemed to work fine in CS4-CC...
			// (?) 'MSXML2.ServerXMLHTTP.6.0' caused problems in CS4,
			//      or led to ActiveX error in CC 2021...
			// (?) 'MSXML2.XMLHTTP.6.0' is sometimes recommended instead.
			// Selecting the right library is still a open question :-(
			// ---
			// `https` requests seem to take much more time in CS4
			// for no identified reason so far...
			// ---
			//const XMLHTTP = 'MSXML2.XMLHTTP';            // ???
			const XMLHTTP = 'MSXML2.ServerXMLHTTP.6.0'     // ???
			//const XMLHTTP = 'MSXML2.XMLHTTP.6.0'         // ???

			// In case `uri` would contain a <DQ> (the only char that
			// requires caution here), we need to escape it as VBS would
			// do: <DQ> => <DQ><DQ>
			// [REM] DO NOT USE `uri.toSource()` in a VBS context!!
			// ---
			0 <= (uriSafe=target.source).indexOf('"')
			&& (uriSafe=uriSafe.replace(RegExp.DQ, '""'));

			return __(
			//----------------------------------
			// VBS Pattern.
			//----------------------------------
			"""
			Dim args : Set args = CreateObject("InDesign.Application").ScriptArgs
			Dim http : Set http = CreateObject("%1")
			Dim data : data = 0
			'---
			On Error Resume Next
			http.Open "GET", "%2", False
			'--- Adding a fake user agent is safer.
			http.SetRequestHeader "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; rv:51.0) Gecko/20100101 Firefox/51.0"
			http.Send
			'---
			If Err.Number = 0 Then
				'--- StatusText can be empty in HTTP2!
				args.SetValue "status", CStr(http.StatusText)
				args.SetValue "statusCode", CStr(http.Status)
				args.SetValue "headers", CStr(http.getAllResponseHeaders)
				data = http.%3
			Else
				args.SetValue "error", CStr(Err.Description)
			End If
			'---
			Set http = Nothing
			Set args = Nothing
			returnValue = %4
			"""
			//----------------------------------
			// Placeholders.
			//----------------------------------
			, /*1*/ XMLHTTP
			, /*2*/ uriSafe
			, /*3*/ target.wantText ? 'responseText' : 'responseBody'
			, /*4*/ target.wantText ? 'data' : 'Escape(data)'
			).trim();
		},

		UESC: function(/*str*/data)
		//----------------------------------
		// Unescape the result of `Escape(responseBody)`, noting that:
		//     "%uA1B2"  encodes  "\xB2\xA1"
		//     "%HH"     encodes  "\x00\xHH"
		//     "X"       encodes  "\x00X"
		// => str
		{
			return data.replace(callee.RE, callee.RP);
		}
		.setup
		({
			// Captures all Escaped entities:
			// %uHHHH , %HH, and safe simple chars.
			//----------------------------------
			RE: /%u[\dA-F]{4}|%[\dA-F]{2}|./gi,

			RP: function(/*str*/m)
			//----------------------------------
			// "%uA1B2"  =>  "\xB2\xA1"
			// "%HH"     =>  "\x00\xHH"
			// "X"       =>  "\x00X"
			{
				return 6==m.length ?
					String.fromCharCode(Number('0x'+m.slice(4)),Number('0x'+m.slice(2,4))) :
					( 3==m.length ? String.fromCharCode(Number('0x'+m.slice(1,3)),0) : (m+'\0') );
			},
		}),
	})
