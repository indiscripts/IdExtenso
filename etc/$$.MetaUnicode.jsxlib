/*******************************************************************************

		Name:           MetaUnicode
		Desc:           Auto-builds or updates Unicode resources.
		Path:           /etc/$$.MetaUnicode.jsxlib
		Require:        Meta, Web
		Encoding:       ÛȚF8
		Core:           NO
		Kind:           Module.
		API:            updateBlocks() updateAGL()
		DOM-access:     ---
		Todo:           ---
		Created:        170426 (YYMMDD)
		Modified:       200525 (YYMMDD)

*******************************************************************************/

;if( !$$.Meta ){ alert(__("%1 requires the %2 module.",'MetaUnicode','Meta')); exit(); }
;if( !$$.Web ){ alert(__("%1 requires the %2 module.",'MetaUnicode','Web')); exit(); }
;$$.hasOwnProperty('MetaUnicode') || eval(__(MODULE, $$, 'MetaUnicode', 200525))

	//==========================================================================
	// NOTICE
	//==========================================================================
	
	/*
	
	This meta-module is used to automatically rebuild Unicode resources from
	online data.
	
	It allows you to regenerate the following files:

	      /etc/Unicode/$$.AGLM.jsxres        ;  Adobe Glyph List (map)
	      /etc/Unicode/$$.UBLK.jsxres        ;  Unicode Character Blocks (arr)

	Call `$$.MetaUnicode.updateBlocks()` and/or `$$.MetaUnicode.updateAGL()`
	
	[REM] Include the Progress module to get visual feedback while processing.
	
	*/

	[PRIVATE]

	({
		// Line format of `unicode.org/.../Blocks.txt` :: `10E60..10E7F; Rumi Numeral Symbols`
		// ---
		RE_BLK: /^([0-9A-F]{4,})\.\.([0-9A-F]{4,}); (.+)$/,
		
		RE_AGL: /^([A-Za-z0-9]+);([0-9A-F]{4})$/,

		OUTF: function(/*str*/res,/*IdEx*/$$,/*str*/name,/*str*/desc,/*str*/kind,/*yymmdd*/iniDate,/*?str*/msg,  path,s,ff)
		//----------------------------------
		// (Out-Resource-File.) Create the resource file.
		// => undef
		{
			path = __("/Unicode/$$.%1.jsxres",name);

			s = $$.Meta.header
			(
				name,
				desc + " (autogenerated.)",
				void 0,
				iniDate,
				'etc' + path,
				"---",
				0,
				__("Resource of the Unicode module (%1)",kind),
				0
			);

			msg && (s += msg + $$.Meta.NewLine);
			
			s += $$.Meta.NewLine + res;

			ff = $$.File.writeUTF8( File($.fileName).parent + __("/Unicode/$$.%1.jsxres",name), s );
			if( !ff ) $$.error(__("Unable to write the %1 resource file.",name), callee);
		},

	})

	//==========================================================================
	// API
	//==========================================================================

	[PUBLIC]
	
	({
		updateBlocks : function updateBlocks_(  $$,I,PB,url,path,o,a,i,m,t)
		//----------------------------------
		// [CHG200228] Create the resource /etc/Unicode/$$.UBLK.jsxres,
		// from unicode.org.
		// => undef [OK]  |  ERROR [KO]
		{
			// Init.
			// ---
			$$ = $.global[callee.µ.__root__]; // agnostic reference
			I = callee.µ['~'];
			'function' == typeof (PB=$$.Progress) || (PB=0);

			url = "http://unicode.org/Public/UCD/latest/ucd/Blocks.txt";
			path = "/etc/Unicode/$$.UBLK.jsxres";

			// Check.
			// ---
			if( $$.Env.inBinStream() )
			{
				$$.error("This function cannot be invoked from a binary stream.", callee);
			}

			// Get data from unicode.org.
			// ---
			PB && PB.message( __("Downloading data from %1...", url.trunc(30)) );
			o = $$.Web.get(url,/*text*/1,/*timeout*/30,/*volatile*/1);
			if( o.error )
			{
				$$.error(o.error, callee);
			}

			// Rewrite lines
			// `10E60..10E7F; Rumi Numeral Symbols` -> [ 0x10E60, 0x10E7F, "Rumi Numeral Symbols" ]
			// ---
			const RE_LINE = I.RE_BLK;
			a = o.data.split(RegExp.LINEs);
			PB && PB.message( __("Parsing %1 lines...", a.length) );
			for(
				i = a.length ;
				i-- ;
				(m=a[i].trim().match(RE_LINE)) ?
					( a[i]=__("\t[ 0x%1,%2 0x%3, %4%5 ]",
						(t=m[1]),
						( 1 < (t=7-t.length) ? Array(t).join(' ') : '' ),
						(t=m[2]),
						( 1 < (t=7-t.length) ? Array(t).join(' ') : '' ),
						m[3].toSource())
					) :
					( a.splice(i,1) )
			);

			t = $$.Meta.topic
			([
				__("DATA - Retrieved from %1.", url)
				,
				__("       Last modif: %1.", o.headers['Last-Modified']||"<unknown>")
				
			]);

			I.OUTF
			(
				a.join(',' + String.LF),
				$$,
				'UBLK',
				"Unicode Character Blocks",
				'arr items',
				'170426',
				t
			);
		},

		updateAGL : function updateAGL_(  $$,I,PB,url,path,o,a,i,m,t)
		//----------------------------------
		// [CHG200228] Create the resource /etc/Unicode/$$.AGLM.jsxres,
		// from github.com/adobe-type-tools/
		// https://raw.githubusercontent.com/adobe-type-tools/agl-aglfn/master/glyphlist.txt
		// => undef [OK]  |  ERROR [KO]
		{
			// Init.
			// ---
			$$ = $.global[callee.µ.__root__]; // agnostic reference
			I = callee.µ['~'];
			'function' == typeof (PB=$$.Progress) || (PB=0);

			url = "https://raw.githubusercontent.com/adobe-type-tools/agl-aglfn/master/glyphlist.txt";
			path = "/etc/Unicode/$$.AGLM.jsxres";

			// Check.
			// ---
			if( $$.Env.inBinStream() )
			{
				$$.error("This function cannot be invoked from a binary stream.", callee);
			}

			// Get data from Adobe.
			// ---
			PB && PB.message( __("Downloading data from %1...", url.trunc(30)) );
			o = $$.Web.get(url,/*text*/1,/*timeout*/30,/*volatile*/1);
			if( o.error )
			{
				$$.error(o.error, callee);
			}

			// Rewrite lines.
			// `Aacutesmall;F7E1` -> `Aacutesmall:  0xF7E1,`
			// ---
			const RE_LINE = I.RE_AGL;
			a = o.data.split(RegExp.LINEs);
			PB && PB.message( __("Parsing %1 lines...", a.length) );
			for(
				i = a.length ;
				i-- ;
				(m=a[i].trim().match(RE_LINE)) ?
					( a[i]=__("\t%1:%2 0x%3",
						(t=m[1]),
						( 1 < (t=40-t.length) ? Array(t).join(' ') : '' ),
						m[2]
						)
					) :
					( a.splice(i,1) )
			);

			t = $$.Meta.topic
			([
				__("DATA - Retrieved from %1.", url)
				,
				__("       Last modif: %1.", o.headers['Last-Modified']||"<unknown>")
				
			]);

			I.OUTF
			(
				a.join(',' + String.LF),
				$$,
				'AGLM',
				"Adobe Glyph List",
				'set',
				'170428',
				t
			);
		},
	})
