/*******************************************************************************

		Name:           TinyInflate
		Desc:           Implements the GZIP-inflate (=decompression) algorithm.
		Path:           /etc/$$.TinyInflate.jsxlib
		Require:        ---
		Encoding:       ÛȚF8
		Core:           NO
		Kind:           Module.
		API:            =unGzip() isGzip() onEngine()
		DOM-access:     NO
		Todo:           ---
		Created:        250216 (YYMMDD)
		Modified:       250223 (YYMMDD)

*******************************************************************************/

;$$.hasOwnProperty('TinyInflate') || eval(__(MODULE, $$, 'TinyInflate', 250223, 'unGzip'))

	//==========================================================================
	// NOTICE
	//==========================================================================

	/*
	
		This module provides an alternative to $$.ZInflate. It specifically
		deals with GZIP-wrapped compressed streams and is mainly based on
		Devon Govett's `tiny-inflate` approach.

		[REM] The private method ~.INFL can anyway handle raw INFLATE data as
		      long as the original compression method was 'deflate' (CM=8).
		
		Use $$.TinyInflate(<myStream>) if you have to 'inflate' (decompress)
		*reasonably sized* GZIP streams (array or string of bytes), such as
		those embedded in certain file formats (e.g WOFF table entries.)
		
		DO NOT TRY TO INFLATE HUGE FILES WITH THE PRESENT MODULE!!!
		(A more efficient solution is then needed.)

		The automatic method `$$.TinyInflate.unGzip(...)` is smart enough to
		support string-or-array inputs ; it also automatically detects and
		unwraps base64-encoded input strings.
		
		The code proposed here is particularly memory-efficient (it uses caches
		and 'volatile' references as often as possible). It also simplifies data
		structures to the bare minimum. It works in ExtendScript with no extra
		dependencies.

	*/

	//==========================================================================
	// DATA STRUCTURES
	//==========================================================================

	[PRIVATE]
	
	({
		
		GZIN: '\x1F\x8B\x08', // Expected signature of a GZIP wrapper.

		// Convenient by-index accessor adjusted to the type of <obj>._src.
		STR_: function(idx){ return this._src.charCodeAt(idx) }, // String
		ARR_: function(idx){ return this._src[idx] },            // Array

		TREE: function()
		//----------------------------------
		// (New-Tree-Object.)
		// <Tree> :: { table:uint16[16], trans:uint16[288] }
		//  - table: table of code length counts
		//  - trans: code -> symbol translation table
		// => new { table:uint16[16], trans:uint16[288] }
		{
			return { table:Array(16), trans:Array(288) };
		},
		
		DATA: function(/*str|byte[]*/source,  q)
		//----------------------------------
		// Volatile data object.
		// this :: ~
		// => { at:(uint)=>byte, _src:str|byte[], dest:byte[], sid:uint, tag:uint, bts:uint, dsz:uint, ltree:Tree, dtree:Tree }&
		{
			q = callee.Q;
			
			q.at = this[ 'string' == typeof source ? 'STR_' : 'ARR_' ];
			q._src = source;
			q.sid = q.tag = q.bts = 0;            // Index, Tag, BitCount.
			
			q.dest || (q.dest=Array());           // Volatile array, no need to reset length...
			q.dsz = 0;                            // Dest length

			q.ltree || (q.ltree=this.TREE());     // Dynamic length/symbol tree (volatile).
			q.dtree || (q.dtree=this.TREE());     // Dynamic distance tree (volatile).

			return q;
		}
		.setup
		({
			Q: { }, // Managed by DATA()
		}),

		FXHT: function(/*Tree&*/L,/*Tree&*/D,  a,i)
		//----------------------------------
		// (Fixed-Huff-Trees.) Build the fixed huffman trees,
		// where <Tree> :: { table:uint16[16], trans:uint16[288] }
		//       L :: Lengths Tree ; D :: Distances Tree
		// this :: any
		// => undef
		{
			// Fixed length tree.
			for( a=L.table, i=-1 ; ++i < 7 ; a[i]=0 );
			a[7] = 24;
			a[8] = 152;
			a[9] = 112;
			// ---
			a = L.trans;
			for( i=-1 ; ++i <  24 ; a[i]     = i+256 );
			for( i=-1 ; ++i < 144 ; a[i+24]  = i     );
			for( i=-1 ; ++i <   8 ; a[i+168] = i+280 );
			for( i=-1 ; ++i < 112 ; a[i+176] = i+144 );

			// Fixed distance tree.
			for( a=D.table, i=-1 ; ++i < 5  ; a[i]=0 );
			a[5] = 32;
			// ---
			for( a=D.trans, i=-1 ; ++i < 32 ; a[i]=i );
		},

		BTBS: function(/*uint[30]&*/bts,/*uint[30]&*/bse,/*4|2*/di,/*3|1*/ini,  i,t)
		//----------------------------------
		// (ExtraBits-And-Base-Tables.) Build extra bits and base tables.
		// this :: any
		// => undef
		{
			for(          i=-1 ; ++i < di ; bts[i]=0                     );
			for( t=30-di, i=-1 ; ++i < t  ; bts[i+di]=0|(i/di)           );
			for(          i=-1 ; ++i < 30 ; bse[i]=ini, ini+=(1<<bts[i]) );
		},

		TBLD: function(/*Tree&*/T,/*uint[]*/Z,/*uint*/di,/*uint*/num,  q,a,i,t)
		//----------------------------------
		// (Built-Tree.)
		// where Tree :: { table:uint16[16], trans:uint16[288] }
		// this :: ~
		// => undef
		{
			q = callee.OFFS;                                          // uint16[16]&

			a = T.table;
			for( i=-1 ; ++i <  16 ; a[i]=0       );                   // Clear code length count table.
			for( i=-1 ; ++i < num ; a[Z[i+di]]++ );                   // Scan symbol lengths, and sum code length counts.
			a[0] = 0;
			for( t=0, i=-1 ; ++i < 16; q[i]=t, (t+=a[i]) );           // Compute offset table for distribution sort
			// ---
			a = T.trans;
			for( i=-1 ; ++i < num ; Z[i+di]&&(a[q[Z[i+di]]++]=i) );   // Create code->symbol translation table (symbols sorted by code)
		}
		.setup
		({
			OFFS: Array(16),  // uint16[16]
		}),
	})
	
	//==========================================================================
	// DECODER
	//==========================================================================

	[PRIVATE]
	
	({

		ONEB: function(/*{...}&*/data,  b)
		//----------------------------------
		// (Get-One-Bit.)
		// this :: any
		// => 0|1
		{
			// Empty tag -> load next tag.
			if( 0 >= data.bts-- )
			{
				data.tag = data.at(data.sid++);
				data.bts = 7;
			}

			// Shift bit out of tag
			b = 1&data.tag;
			data.tag >>>= 1;

			return b;
		},

		READ: function(/*{...}&*/data,/*uint*/num,/*uint16*/base,  v)
		//----------------------------------
		// (Read-Bits.) Read num bits and add base.
		// this :: any
		// => uint16
		{
			if( !num ) return base;

			while( 24 > data.bts )
			{
				data.tag |= (data.at(data.sid++) << data.bts);
				data.bts += 8;
			}

			v = data.tag&(0xFFFF >>> (16-num));
			data.tag >>>= num;
			data.bts -= num;

			return v + base;
		},

		SYMB: function(/*{...}&*/data,/*Tree*/T,  s,i,z,t,a)
		//----------------------------------
		// (Decode-Symbol.) Decode a symbol thru T.
		// this :: any
		// => uint16
		{
			while( 24 > data.bts )
			{
				data.tag |= data.at(data.sid++) << data.bts;
				data.bts += 8;
			}

			// Get more bits while code value is above sum.
			s = i = z = 0;
			t = data.tag;
			a = T.table;
			do{ i=2*i+(1&t), t >>>= 1, ++z, s+=a[z], i-=a[z] }while( i >= 0 );

			data.tag = t;
			data.bts -= z;

			return T.trans[s+i];
		},

		DCOD: function(/*{...}&*/data,  QL,QC,hL,hD,hTot,i,z,n,sym,p)
		//----------------------------------
		// (Decode-Dyn-Trees.) Decode dynamic trees from the stream.
		// this :: ~
		// => undef
		{
			const RD = this.READ;
			const SB = this.SYMB;
			const QS = callee.LIDX;

			QL = callee.LENS;                                              // uint8[288+32]&
			for( i=-1 ; ++i < 19 ; QL[i]=0 );

			hL = RD(data, 5, 257);                                         // Get 5 bits HLIT (257-286)
			hD = RD(data, 5, 1);                                           // Get 5 bits HDIST (1-32)
			z =  RD(data, 4, 4);                                           // Get 4 bits HCLEN (4-19)
			for( i=-1 ; ++i < z ; QL[QS.charCodeAt(i)]=RD(data,3,0) );     // Read code lengths.

			QC = callee.TCOD;                                              // Tree&
			this.TBLD(QC, QL, 0, 19);                                      // Build code length tree.

			for( hTot=hL+hD, n=0 ; n < hTot ; )                            // Decode code lengths for the dynamic trees.
			switch( sym=SB(data, QC) )
			{
				case 16:
					for( p=QL[n-1], z=RD(data,2,3) ; z-- ; QL[n++]=p );    // Copy previous code length 3-6 times (2 bits)
					break;
				case 17:
					for( z=RD(data,3,3) ; z-- ; QL[n++]=0 );               // Repeat code length 0 for 3-10 times (3 bits)
					break;
				case 18:
					for( z=RD(data,7,11) ; z-- ; QL[n++]=0 );              // Repeat code length 0 for 11-138 times (7 bits)
					break;
				default:
					QL[n++] = sym;                                         // Values 0-15 represent the actual code lengths.
			}

			// Building dynamic trees...
			this.TBLD(data.ltree, QL,  0, hL);
			this.TBLD(data.dtree, QL, hL, hD);
		}
		.setup
		({
			LIDX: String.fromCharCode(16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15), // Special ordering of code length codes (str)
			LENS: Array(288+32), // Lengths :: uint8[]
			TCOD: µ['~'].TREE(), // Code tree.
		}),

	})

	//==========================================================================
	// INFLATE
	//==========================================================================
	
	[PRIVATE]
	
	({

		INFC: function(/*{...}&*/data,/*Tree*/L,/*Tree*/D,  r,sym,n,i,t)
		//----------------------------------
		// (Inflate-Compressed-Block.) Inflate a compressed block using T and D trees.
		// this :: ~
		// => 1
		{
			const RD = this.READ;

			const LBT = callee.LBTS;
			const LBS = callee.LBSE;
			const DBT = callee.DBTS;
			const DBS = callee.DBSE;

			r = data.dest;
			while( 1 )
			{
				sym = this.SYMB(data, L);

				if( 256 >= sym )
				{
					if( 256 == sym ) return 1;                   // End of block
					r[data.dsz++] = sym;
					continue;
				}
				
				sym -= 257;
				n = RD(data, LBT[sym], LBS[sym]);                // Possibly get more bits from length code
				t = this.SYMB(data, D);
				t = data.dsz - RD(data, DBT[t], DBS[t]);         // Possibly get more bits from distance code
				for( i=t, t+=n ; i < t ; r[data.dsz++]=r[i++] ); // Copy match
			}
		}
		.setup
		({
			// Extra bits and base tables for Length codes.
			LBTS: Array(30),  // uint8[30]  ; Table of length bits
			LBSE: Array(30),  // uint16[30] ; Table of length base

			// Extra bits and base tables for Distance codes
			DBTS: Array(30),  // uint8[30]  ; Table of distance bits
			DBSE: Array(30),  // uint16[30] ; Table of distance base
		}),

		INFU: function(/*{...}&*/data,  dst,i,z,t)
		//----------------------------------
		// (Inflate-Uncomp-Block.) Inflate an uncompressed block.
		// => 1 [OK]  |  0 [ERR]
		{
			// unread from bitbuffer
			for( ; data.bts > 8 ; data.sid--, data.bts-=8 );

			i = data.sid;
			z = 256*data.at(1+i) + data.at(i);                             // Length
			t = 256*data.at(3+i) + data.at(2+i);                           // One's complement of length
			if( z !== (~t&0x0000ffff) ) return 0;                          // Invalid length.

			for                                                            // Copy block.
			(
				dst=data.dest, data.sid+=4, i=z ;
				i-- ;
				dst[data.dsz++] = data.at(data.sid++)
			);

			data.bts = 0;                                             // Make sure we start next block on a byte boundary.
			return 1;
		},
		
		INFL: function(/*str|byte[]*/source,  data,TL,TD,eob,tpe,ok,a,b)
		//----------------------------------
		// (Inflate-Entry-Point.) Inflate (i.e uncompress) stream from source.
		// this :: ~
		// => byte[] [OK]  |  false [KO]
		{
			data = this.DATA(source);

			TL = callee.TLEN;
			TD = callee.TDIS;

			do
			{
				eob = this.ONEB(data);                                // Read final block flag.
				tpe = this.READ(data, 2, 0);                          // Read block type (0|1|2).
				if( 2 < tpe ) return false;                           // Error.

				2 == tpe
				? ( this.DCOD(data), a=data.ltree, b=data.dtree )     // Dynamic Huff. trees
				: ( tpe ? ( a=TL, b=TD ) : (a=b=0) );                 // Fixed Huff. trees, or uncompressed.
				
				ok = this[tpe?'INFC':'INFU'](data,a,b);               // Decompress.
				if( !ok ) return false;

			} while( !eob );
			
			return data.dest.slice(0, data.dsz);
		}
		.setup
		({
			// Static lengths and distances trees.
			TLEN: µ['~'].TREE(),
			TDIS: µ['~'].TREE(),
		}),
		
		IB64: function(/*str|byte[]|base64*/src,  t)
		//----------------------------------
		// (Is-Base64-Encoded.) Whether this stream looks base64 encoded,
		// having the corresponding GZIP wrapper signature.
		// => 1 [OK]  |  0 [KO]
		{
			'string' == typeof src
			|| (src=String.fromCharCode.apply(0,src.slice(0,10)));

			return +(0===src.indexOf(callee.B64_HINT));
		}
		.setup
		({
			B64_HINT: µ['~'].GZIN.toBase64(true), // `H4sI`
		}),

	})

	//==========================================================================
	// API
	//==========================================================================

	[PUBLIC]
	
	({
		onEngine: function onEngine_(  I,a,b)
		//----------------------------------
		// Init. (loads some tables and trees in caches.)
		{
			I = callee.µ['~'];

			I.FXHT(I.INFL.TLEN, I.INFL.TDIS);               // Build fixed huffman trees.
			// ---
			I.BTBS(a=I.INFC.LBTS, b=I.INFC.LBSE, 4, 3);     // Build extra bits and base tables (lengths)
			a[28]=0, b[28]=258;                             // Fix special case.
			// ---
			I.BTBS(I.INFC.DBTS, I.INFC.DBSE, 2, 1);         // Build extra bits and base tables (dists)
		},
		
		isGzip: function isGzip_SA_B(/*str|byte[]|base64*/src,  _SKP_B64_,I,sg)
		//----------------------------------
		// Whether this stream (in whatever form) has the GZIP file signature.
		// Useful for quick test before processing data. (Rem: _SKP_B64_ is
		// for internal use.)
		// => 1 [OK]  |  0 [KO]
		{
			I = callee.µ['~'];
			if( !_SKP_B64_ && I.IB64(src) ) return 1;
			
			sg = I.GZIN;
			src = ( src && src instanceof Array )
			? String.fromCharCode.apply(0,src.slice(0,sg.length))
			: String(src).slice(0,sg.length);
			
			return +(0===src.indexOf(sg));
		},
		
		unGzip: function unGzip_SA_SA(/*str|byte[]|base64*/src,/*bool=0*/AS_BYTES,  I,b64,len,q,ini,end,flg,r)
		//----------------------------------
		// Inflate (uncompress) a GZIP stream (aka GZIP-wrapped INFLATE data.)
		// `src` can be supplied as a JS string (assumed to deliver uint8 char codes)
		// or as an array of bytes. This method also supports base64 encoding of the
		// incoming stream (although it won't re-encode the output into base64.)
		// If AS_BYTES is truthy, return an array of bytes. Otherwise, return a
		// string of uint8 char codes (default behavior.)
		// ---
		// [WARNING] Even returned as a string, the retval remains equivalent to an array
		// of bytes (uint8) without extra conversion--its origin and/or usage being unknown.
		// So, if the result is to be interpreted as e.g. UTF8 data, it is the responsibility
		// of the client script to apply further treatment like UTF8->UTF16 conversion, etc.
		// => str|byte[] [OK]  |  ERR [KO]
		{
			I = callee.µ['~'];

			// Minimal requirements.
			// ---
			( 'string' == typeof src || (src && src instanceof Array) )
			|| error("Invalid GZIP stream: should be String or Array of bytes.");
			
			10 <= src.length
			|| error( __("Invalid GZIP stream: insufficient size (%1)",src.length) );

			// Input in base64?
			// ---
 			if( I.IB64(src) )
 			{
 				// No need to re-check the signature then.
 				src = String.fromBase64(src,true);
 			}
 			else
 			{
				// Valid signature?
				callee.µ.isGzip(src, 'skipB64')
				|| error("Invalid GZIP stream: missing signature.");
 			}

			// ---
			// [REM] Multibytes data in GZIP are Little-Endian ordered (<).
			// Spec: https://datatracker.ietf.org/doc/html/rfc1952
			// ---

			// Skip needless bytes?
			// ---
			(q=callee.Q||(callee.Q={}))._src = src;
			q.at = I[ 'string' == typeof src ? 'STR_' : 'ARR_' ];
			// ---
			end = -8 + src.length;
			flg = q.at(3);
			ini = 10;
			// ---
			if(  4&flg ) ini += 2 + 256*q.at(1+ini) + q.at(ini);      // Skip FEXTRA?
			if(  8&flg ) while( ini < end && !q.at(ini++) );          // Skip FNAME?
			if( 16&flg ) while( ini < end && !q.at(ini++) );          // Skip FCOMMENT?
			if(  2&flg ) ini += 2;                                    // FHCRC

			delete q._src;                                            // Free up reference.

			// Last check.
			// ---
			ini < end
			|| error("Invalid GZIP stream: cannot find compressed blocks.");

			// Call Inflate.
			// Rem: `src.slice()` will work in both array & string cases :-)
			( r = I.INFL( src.slice(ini,end) ) )
			|| error("Invalid GZIP stream: failed to achieve inflate.");
			
			return AS_BYTES ? r : String.fromCharCode.apply(0,r);
		},

	})
