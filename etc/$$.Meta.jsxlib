/*******************************************************************************

		Name:           Meta
		Desc:           Templates and tools for manipulating IdExtenso components.
		Path:           /etc/$$.Meta.jsxlib
		Require:        Date.guess() ; trim()
		Encoding:       ÛȚF8
		Core:           NO
		Kind:           Module.
		API:            =header() NewLine yymmdd() topic() parseHeader()
		DOM-access:     ---
		Todo:           ---
		Created:        180516 (YYMMDD)
		Modified:       200525 (YYMMDD)

*******************************************************************************/

;$$.hasOwnProperty('Meta') || eval(__(MODULE, $$, 'Meta', 200525, 'header'))

	//==========================================================================
	// NOTICE
	//==========================================================================

	/*
	
	This module helps you create and/or parse IdExtenso files or components at
	development stage.
	
	It is mostly used to regenerate resource files automatically. Dedicated 'meta-
	modules', like MetaUnicode or MetaCollator, occasionally have to update their
	own resource files, or some internal component, from fresh data being either
	available online or supplied by the developer of the module.
	
	`Meta` provides a simple and generic API to handle IdExtenso I/O files in a
	uniform way. In particular, it manages the header format of every IdExtenso-
	compliant file. (See ~.HEAD.)
	
	NOTE. - Meta-modules are intended for IdExtenso developers only, they're not
	supposed to be included as such in your final product. So, except in very
	special cases, they do not want to run if IdExtenso is jsxbin-compiled. It
	is therefore recommended to throw an error from your meta-module whenever
	`$$.Env.inBinStream()` returns 1.
	
	By convention, every meta-module should have the prefix `Meta...`
	
	*/

	[PRIVATE]

	({

		// Prolog pattern.
		//----------------------------------
		HEAD : [
			String.SL + Array(80).join('*'),
			'',
			String.TB + String.TB + "Name:           %1",            // %1  Short name of the ressource
			String.TB + String.TB + "Desc:           %2",            // %2  Description
			String.TB + String.TB + "Path:           %3",            // %3  Path in the form '/etc/$$.name.jsxres'
			String.TB + String.TB + "Require:        %4",            // %4  Required module (e.g 'Yalt'), or '---'
			String.TB + String.TB + "Encoding:       ÛȚF8",
			String.TB + String.TB + "Core:           %5",            // %5  In the core? 'YES' | 'NO'
			String.TB + String.TB + "Kind:           %6.",           // %6  'Module' | 'Resource' ...
			String.TB + String.TB + "API:            ---",
			String.TB + String.TB + "DOM-access:     %7",            // %7  'YES' | 'NO' | <any>
			String.TB + String.TB + "Todo:           ---",
			String.TB + String.TB + "Created:        %8 (YYMMDD)",   // %8  Creation date in YYMMDD form
			String.TB + String.TB + "Modified:       %9 (YYMMDD)",   // %9  Current date in YYMMDD form
			'',
			Array(80).join('*') + String.SL,
			'',
			''
			].join(String.X1),
		
		// Separation line :: `//===...`
		// ---
		EQLN : String.SL + String.SL + Array(75).join('='),
		
		YYMD : function(/*Date*/d)
		//----------------------------------
		// => `YYMMDD` date form.
		{
			return (''+d.getFullYear()).substring(2) +
				('0'+(1+d.getMonth())).substr(-2) +
				('0'+d.getDate()).substr(-2);
		},
	})

	//==========================================================================
	// API
	//==========================================================================

	[PUBLIC]
	
	({
		NewLine: String.LF,

		yymmdd: function yymmdd_s$Date$x_S(/*Date|any=now*/dt)
		//----------------------------------
		// Return `dt` in YYMMDD form.
		// => str
		{
			return callee.µ['~'].YYMD(Date.guess(dt));
		},
		
		topic : function topic_SA_S(/*str|str[]*/title,/*str=''*/spacing,  I,NL,s,i)
		//----------------------------------
		// Return a three-line topic name in the form
		//   `<spacing>//======================
		//    <spacing>// <title>
		//    <spacing>//======================`
		// [CHG200228] Supports multiline `title` (array.)
		// => str
		{
			I = callee.µ['~'];
			NL = callee.µ.NewLine;

			spacing = String(spacing||'');
			
			if( title instanceof Array )
			{
				for( s='', i=-1 ; ++i < title.length ; s += NL+spacing+'// '+title[i] );
				s && s=s.slice(NL.length);
			}
			else
			{
				s = spacing + '// ' + title;
			}
			
			return [ spacing+I.EQLN, s, spacing+I.EQLN].join(NL);
		},

		header : function header_S_s_s_s_s_s_b_s_bs_S(/*str*/name,/*?str*/desc,/*?ymd*/modf,/*?ymd*/crea,/*?str*/path,/*?str*/req,/*bool=0*/inCore,/*?str*/kind,/*?bool|str*/dom,  I)
		//----------------------------------
		// Build a full IdExtenso's header:
		// `name`   str       Name of the component.
		// `desc`   str       Description line (opt.)
		// `modf`   str       Modified date in YYMMDD form (default=now.)
		// `crea`   str       Created date in YYMMDD form (default=modf.)
		// `path`   str       Path of the component -- e.g "/etc/MyModule/$$.MyResource.jsxres" -- (opt.)
		// `req`    str       List of required components -- e.g "Web ; Yalt" -- (opt.)
		// `inCore` bool      Whether the component belongs to the core branch (default=0.)
		// `kind`   str       'Module' | 'Snipper' | 'Resource' ... (opt.)
		// `dom`    bool|str  Whether the component performs DOM-access (default='NO'.)
		//                    If a string is supplied, it is rendered as is.
		// ---
		// => str
		{
			I = callee.µ['~'];
			
			modf = modf && 6==(modf=String(modf).trim()).length ? modf : I.YYMD(new Date);
			crea = crea && 6==(crea=String(crea).trim()).length ? crea : modf;
			dom = ( 'string' == typeof dom && (dom=dom.trim()) ) || ( dom ? 'YES' : 'NO' );

			return __(callee.µ['~'].HEAD.replace(RegExp.X1,callee.µ.NewLine)
				, String(name).trim()
				, String(desc||'').trim() || '---'
				, String(path||'').trim() || '---'
				, String(req ||'').trim() || '---'
				, inCore ? 'YES' : 'NO'
				, String(kind||'').trim() || '---'
				, dom
				, crea
				, modf
				);
		},
		
		parseHeader: function parseHeader_S_O(/*str*/s,  i,m,q,k)
		//----------------------------------
		// Parse the header contained in the string s and return a
		// { key => val } object (each `val` being a string.)
		// [REM] `s` must match the minimal <SL>**** . . . ****<SL> scheme,
		// then data are extracted from the pattern `<TB><TB><Key>:<SP>+<value>`
		// e.g `Name:    MyModule` or `Path:   /etc/path/to/$$.MyModule.jsxlib`
		// ---
		// => obj [VOLATILE]  |  false [KO]
		{
			if( 'string' != typeof s ) return false;
			if( -1 == (i=s.indexOf(String.SL + '****')) ) return false;
			s = s.substr(i);
			if( -1 == (i=s.indexOf('****' + String.SL)) ) return false;
			s = s.slice(0,i);
			if( !(m=s.match(callee.RE_DATA)) ) return false;
			
			$.global[callee.µ.__root__].kill(q=callee.Q);
			for( i=-1 ; ++i < m.length ; )
			{
				s = m[i].trim(); // <key>:<SP>+<value>
				k = s.slice(0,s.indexOf(':'));
				q[k] = s.substr(1+k.length).ltrim();
			}
			
			return q;
		}
		.setup({ Q:{}, RE_DATA:/\t\t[^:]+: *[^\t\r\n]+/g }),
	})
