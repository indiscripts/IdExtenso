/*******************************************************************************

		Name:           Script
		Desc:           Scripting execution environment (preferrences, jsxbin, DOM, IdExtenso...)
		Path:           /core/Env/$$.script.jsxinc
		Require:        enum.revSource() ; Env/system
		Encoding:       ÛȚF8
		Core:           YES
		Kind:           Part of the Env module.
		API:            appScriptsPath usrScriptsPath idexEntryPath runningScript
		                engineState() runCount() session()
		                idEngine() inBinStream() inStartup() scriptsPanel()
		                domVersion()->$$ globalEvent()->$$ tempRedraw()->$$
		                uiLevel()->$$ canToolkit()->$$
		DOM-access:     [GET] app.scriptPreferences ; app.properties.activeScript ;
		                      app.properties.activeScriptUndoMode ;
		                      app.performanceMetric
		Todo:           ---
		Created:        190202 (YYMMDD)
		Modified:       220416 (YYMMDD)

*******************************************************************************/

	[PRIVATE]
	
	({
		// Set of undo modes :: {1699963221:"AUTO_UNDO", 1699963733:"ENTIRE_SCRIPT", etc}
		// ---
		UM2S: eval(UndoModes.revSource()),
		
		// Set of interaction levels :: {1699311170:"INTERACT_WITH_ALERTS", 1699311169:"INTERACT_WITH_ALL", 1699640946:"NEVER_INTERACT"}
		// ---
		UL2S: eval(UserInteractionLevels.revSource()),

		// ExtendScript.
		// ---
		ESVS : __("%1 (build: %2)", $.version, $.build),       // e.g "4.5.6 (build: 80.1060872)"
		ESNB : parseFloat($.version),                          // e.g  4.5  [subdigits are ignored.]
		
		// ScriptUI.
		// ---
		SUVS : __("%1 (core: %2/%3)",                          // e.g "6.1.8 (core: 6.2.2/Drover)"
				ScriptUI.version,                              //     "4.0.38 (core: 4.0.19/Win32)"
				ScriptUI.coreVersion,
				ScriptUI.frameworkName),
		SUNB : parseFloat(ScriptUI.version),                   // e.g  6.1  [subdigits are ignored.]

		// Path for include files for the current script.
		// ---
		INCP : String($.includePath),
		
		// Name of the current ExtendScript engine.
		// ---
		ENGI: String($.engineName),

		ESTK: function(  BT)
		//----------------------------------
		// [ADD210106] ESTK status (from BridgeTalk.)
		// => 'BUSY' | 'IDLE' | 'PUMPING' | 'ISNOTRUNNING' | 'ISNOTINSTALLED' | 'UNDEFINED'
		{
			return (BT=$.global.BridgeTalk) ? BT.getStatus('estoolkit') : 'UNDEFINED';
		},

		BSTK: function()
		//----------------------------------
		// [ADD170421] (Binary-in-Stack.)
		// Tell whether there is a JSXBIN level in the current
		// stack, that is, a line in the form `[xyz]` (xyz being a
		// numeric flag.) If so, return "xyz", otherwise undefined.
		// ---
		// [REM] This method is stronger than the function.toSource()
		// test, since it considers the dynamic state of the stack
		// with respect to the context from which it is invoked.
		// For example, it can identify that the calling context
		// belongs to an `eval(JSXBIN)` stream while the main script
		// itself has been identified as pure, uncompiled JSX (cf ~.JXBN)
		// See IMPLEMENTATION NOTES for further detail.
		// ---
		// => str [BinaryFlag] | undefined [NoBinary]
		{
			callee.Q || (callee.Q=/(?:^|[\r\n]+) *\[(\d+)\] *[\r\n]/);
			return ($.stack.match(callee.Q)||'')[1];
		},
		
		SPRF: function(/*0|1*/UPDATE,  q,t,v)
		//----------------------------------
		// (Script-Prefs.)
		// Return the *current* script preferences in a lightweight cached object.
		// [REM] Most preferences (including the DOM version) can be modified by
		// the client code at any moment. Turn UPDATE to 1 to force update.
		// ---
		// => { version: str, enableRedraw: 0|1, userInteractionLevel: uint,
		//      scriptsFolder: str, measurementUnit: uint|-1 }
		{
			q = callee.Q || (callee.Q={});
			if( UPDATE || !(q.version) )
			{
				t = app.scriptPreferences;
				
				// num ; => str
				v = parseFloat(q.version=t.version);

				// => 0 | 1
				q.enableRedraw = +(t.enableRedraw);
				
				// => uint
				q.userInteractionLevel = +(t.userInteractionLevel);
				
				// => str
				q.scriptsFolder = String(t.scriptsFolder);
				
				// => uint | -1 [CS4]
				q.measurementUnit = v >= 7 ? +(t.measurementUnit) : -1;
			}
			return q;
		}
		.self(µ['~'],1),

	})

	[PRIVATE]
	
	({
		// Whether the present code is in binary.
		// ---
		JXBN : µ['~'].BSTK() ? 1 : 0,                          // 1 (in jsxbin) | 0 (uncompiled)
		
		// [ADD210403] Whether the present script is executed as
		// a 'startup script' *now* (i.e when loading the engine.)
		// Since `~.STUP` is fixed at engine stage, it won't change
		// when re-running the script within a persistent engine so
		// the exact meaning of ~.STUP is, the present script is or
		// has been executed at startup. Use the method `µ.inStartup()`
		// to check whether your client script is in startup stage.
		// => true [STARTUP-SCRIPT]  |  false [NOT-A-STARTUP-SCRIPT]
		// ---
		STUP : app.hasOwnProperty('performanceMetric')
		&& 'function'==typeof app.performanceMetric
		&& 0===app.performanceMetric(PerformanceMetricOptions.MINISAVE_COUNT),

		// URI path to the 'Scripts Panel' folder (User branch.)
		// E.g "/(...)/AppData/Roaming/Adobe/InDesign/(...)/en_GB/Scripts/Scripts%20Panel"
		// ---
		SCPU : µ['~'].SPRF().scriptsFolder,
		
		// URI path to the app ACTIVE script (if available), or $.fileName.
		// [REM] If activeScript is unavailable, $.fileName is reliable.
		// ---
		SCPT : String(app.properties.activeScript||$.fileName),

		// Active Script Undo Mode (if available).
		// => AUTO_UNDO | ENTIRE_SCRIPT | FAST_ENTIRE_SCRIPT | SCRIPT_REQUEST (def.)
		// ---
		SCUM : µ['~'].UM2S[Number(app.properties.activeScriptUndoMode||UndoModes.SCRIPT_REQUEST)],

		// Engine state.
		// ---
		// -1 :: non-persistent engine
		//  0 :: already-processed persistent engine.
		//       (assigned from IdExtenso's entry point.)
		//  1 :: first-call persistent engine
		// ---
		ENST: 'main'==µ['~'].ENGI ? -1 : +1,

		DOMV : function(/*undef|1|0*/BKP,  v)
		//----------------------------------
		// [ADD170417] Backup the DOM version at loading stage.
		// The caller is responsible for updating ~.SPRF if needed,
		// since this function relies on ~.SPRF().version.
		// => str | 0 | 1
		// ---
		// BKP===1          => backup and return the DOM version
		//                     (e.g "12.0".)
		// BKP===undefined  => return the backup value.
		// otherwise        => tell whether the backup value
		//                     differs from the current one.
		// ---
		// [REM] <ScPrefs>.version is ENGINE-persistent (not SESSION-persistent)
		// and its default value is app.version.
		{
			if( 'undefined' == typeof BKP ) return callee.Q;

			v = this.SPRF().version;

			return 1===BKP ? ( callee.Q=v ) : ( 1-(callee.Q==v) );

		}
		.self(µ['~'],1),

		RDRW : function(/*undef|1|0*/BKP,  v)
		//----------------------------------
		// [ADD170417] Backup enableRedraw at loading stage.
		// The caller is responsible for updating ~.SPRF if needed,
		// since this function relies on ~.SPRF().enableRedraw.
		// => 0 | 1
		// ---
		// BKP===1          => backup and return SPRF().enableRedraw
		// BKP===undefined  => return the backup value.
		// otherwise        => tell whether the backup value
		//                     differs from the current one.
		// ---
		// [REM] <ScPrefs>.enableRedraw is APPLICATION-persistent.
		{
			if( 'undefined' == typeof BKP ) return callee.Q;

			v = this.SPRF().enableRedraw;

			return 1===BKP ? ( callee.Q=v ) : ( 1-(callee.Q==v) );

		}
		.self(µ['~'],1),

		UILV : function(/*undef|1|0*/BKP,  v)
		//----------------------------------
		// [ADD170417] Backup userInteractionLevel at loading stage.
		// The caller is responsible for updating ~.SPRF if needed,
		// since this function relies on ~.SPRF().userInteractionLevel.
		// => uint | 0 | 1
		// ---
		// BKP===1          => backup and return
		//                     SPRF().userInteractionLevel.
		// BKP===undefined  => return the backup value.
		// otherwise        => tell whether the backup value
		//                     differs from the current one.
		// ---
		// [REM] <ScPrefs>.userInteractionLevel is SESSION-persistent
		// (default is UserInteractionLevels.INTERACT_WITH_ALL.)
		{
			if( 'undefined' == typeof BKP ) return callee.Q;

			v = this.SPRF().userInteractionLevel;

			return 1===BKP ? ( callee.Q=v ) : ( 1-(callee.Q==v) );

		}
		.self(µ['~'],1),

	})

	//==========================================================================
	// API
	//==========================================================================

	[PUBLIC]

	({
		// URI path to the APP 'Scripts' folder.
		// E.g "/c/Program%20Files/Adobe/Adobe%20InDesign%20CC%202017/Scripts"
		// ---
		appScriptsPath : String(Folder(µ['~'].IDPK+'/Scripts')),

		// URI path to the USER 'Scripts' folder.
		// E.g "/(...)/AppData/Roaming/Adobe/InDesign/(...)/en_GB/Scripts"
		// ---
		usrScriptsPath : String(Folder(µ['~'].SCPU).parent),
		
		// URI path to IdExtenso Entry Folder, if available ; false otherwise.
		// [ADD180513] [REM190311] Wrong IDEX test fixed in $$.Env.
		// ---
		idexEntryPath : µ['~'].IDEX && String(File(µ['~'].IDEX).parent),
		
		// URI pathname to the running script file.
		// [ADD171024]
		// ---
		runningScript : µ['~'].SCPT,

		engineState: function engineState_b_TS(/*0|1=0*/AS_STRING,  t)
		//----------------------------------
		// State of the ExtendScript engine (-1, 0, or 1.)
		// (default) => -1 | 0 | +1   [see below for the meanings.]
		// ---
		// [ADD170406] If `AS_STRING` is truthy, return a string instead.
		// [FIX171103] Corrected a typo ('first-call' state.)
		// ---
		// Meaning of the returned values:
		// -1 | "non-persistent"         <-> The engine is non-persistent.
		//  0 | "persistent/processed"   <-> The engine is persistent
		//                                   and has been invoked before.
		// +1 | "persistent/first-call"  <-> The engine is persistent and
		//                                   is now invoked for the 1st time.
		{
			t = callee.µ['~'].ENST;
			return AS_STRING ? callee.Q[t] : t;
		}
		.setup
		({
			Q:
			{
			'-1': 'non-persistent',
			'0' : 'persistent/processed',
			'1' : 'persistent/first-call'
			}
		}),

		inStartup : function inStartup_B()
		//----------------------------------
		// [ADD210403] Whether the current code is now being executed
		// as a startup script, which is entirely determined by
		// engineState() and ~.STUP.
		// => 0 [NO]  |  1 [YES]
		{
			return callee.µ['~'].ENST && callee.µ['~'].STUP ? 1 : 0;
		},

		runCount: function runCount_b_I(/*bool=0*/resetCount)
		//----------------------------------
		// Count of IdExtenso runs during that InDesign session.
		// Run count is incremented each time $$.jsxinc re-runs.
		// ---
		// [REM] Regardless of their respective engine, two distinct IdEx
		// scripts may increment consecutively the (shared) `IDEXTENSO`
		// env variable, referred to as runCount here. For that
		// reason, runCount > 1 *does not* imply that a specific script
		// has been executed before (within the present session.) Typi-
		// cally, if some IdExtenso startup scripts are installed,
		// a particular script may read $$.Env.runCount() > 1 even if
		// it is executed for the 1st time in the session. To control
		// session-related settings at the script level, use $$.Settings.
		// ---
		// => 1, 2, 3...
		{
			resetCount && $.setenv('IDEXTENSO',1);
			return +$.getenv('IDEXTENSO'); // [CHG220416] string-to-int conversion
		},

		session: function session_b_S(/*bool=0*/resetID)
		//----------------------------------
		// [ADD220416] Return a unique alphanumeric string
		// associated to that InDesign session. It is determined
		// once, whatever the script that runs IdExtenso for the
		// first time. Hence, `$$.Env.session()` returns a unique
		// string *per InDesign session*, although that string
		// could be shared by distinct IdExtenso scripts.
		// ---
		// => str
		{
			resetID && $.setenv('IDEX_SESSION',(+new Date).toString(36));
			return $.getenv('IDEX_SESSION');
		},

		idEngine : function idEngine_S()
		//----------------------------------
		// Return the current engine name.
		// E.g => "main" | "MyTargetEngine"
		{
			return callee.µ['~'].ENGI;
		},
		
		inBinStream : function inBinStream_B()
		//----------------------------------
		// Tell whether the current code belongs to a JSXBIN stream.
		// (This is a dynamic runtime test, contrary to $$.inBin)
		// => 0 [NO]  |  1 [YES]
		{
			return callee.µ['~'].BSTK() ? 1 : 0;
		},
		
		scriptsPanel : function scriptsPanel_b_b_b_S$false$(/*bool=0*/APP_BRANCH,/*bool=0*/URI_FORM,/*bool=0*/NO_CHECK,  s)
		//----------------------------------
		// [ADD180513] Return the full path of the `Scripts Panel` folder, without
		// the ending slash, e.g "/some/specific/path/to/Scripts Panel". If that folder
		// does not exist, create it (unless NO_CHECK is truthy.)
		// APP_BRANCH :: Whether the app branch location must be returned (default is false.)
		// URI_FORM   :: Whether the result must be in URI notation (default is false.)
		// NO_CHECK   :: Do not check whether the folder actually exists (by default, check is performed.)
		// E.g => "/(...)/AppData/Roaming/Adobe/InDesign/(...)/en_GB/Scripts/Scripts Panel"
		// ---
		// => str [OK]  |  false [KO] == in check mode the folder doesn't exist AND cannot be created
		{
			// URI notation of the parent path
			// ---
			s = callee.µ[APP_BRANCH ? 'appScriptsPath' : 'usrScriptsPath'];
			
			s = URI_FORM ? (s + "/Scripts%20Panel") : (decodeURI(s) + "/Scripts Panel");

			NO_CHECK || Folder(s).exists || Folder(s).create() || (s=false) ||
				$.global[callee.µ.__root__].Log.warn( __("%1 > Unable to create the folder %2.",callee.µ,s.toSource()) );

			return s;
		},

		domVersion : function domVersion_ns_b_SB(/*?|num|str|-1*/ver,/*bit=0*/EQUAL,  s)
		//----------------------------------
		// [ADD170417] Return or compare the current DOM version number
		// (from scriptPrefs.)
		// 1. If no argument is supplied, return the full DOM version as a
		//    string, including subdigits, e.g '11.1.0.22'.
		// 2. If `ver` is supplied (String or Number), interpret it as a number
		//    and return 1 if the current DOM version is greater or equal, 0 otherwise.
		// 3. If EQUAL is turned on, return 1 if the current DOM version matches
		//    `ver` digits (# or #.# format), 0 otherwise.
		// 4. If `ver===-1`, return the backup value of the DOM version (str)
		//    as registered in ~.DOMV().
		// [REM] This method is made available straight from `$$`.
		{
			if( -1===ver ) return callee.µ['~'].DOMV(); // backup value.

			s = app.scriptPreferences.version;
			return 'undefined' == typeof ver ?
				s :
				+(
					EQUAL ?
					( (ver=''+parseFloat(''+ver)), s.substr(0,ver.length)==ver ) :
					( parseFloat(s) >= parseFloat(''+ver) )
				);

		}
		.copy('..'),
		
		globalEvent : function globalEvent_e(/*bool=0*/ALLOW_PREVIOUS_EVENT,  ev,s)
		//----------------------------------
		// [CHG210322] Prevent a persistent engine from returning an event already
		// processed by this function (unless ALLOW_PREVIOUS_EVENT is truthy.)
		// [ADD190203] Return the DOM global event (if available), or zero.
		// [REM] The global variable `evt` is automatically set when the current script
		// is invoked as an event handler (e.g from a MenuAction listener.)
		// [REM] This method is made available straight from `$$`.
		// Typical ret:
		// { eventType:"onInvoke", target:<ScriptMenuAction>, eventPhase:0x656E4154/*AT_TARGET*/,
		//   bubbles:false, cancelable:false, timeStamp:<Date>, propagationStopped:false,
		//   defaultPrevented:false, id:<uint>, parent:<ScriptMenuAction>, index:<uint> }
		// ---
		// => Event [OK]  |  0 [KO]
		{
			// [FIX210404] Since `ev` is a DOM object, validity check
			// is also required before accessing any property!
			// ---
			if( !(ev=$.global.evt) || (!ev.isValid) ) return 0;
			
			// Take a stamp of that event.
			// ---
			s = (ev.hasOwnProperty('eventType')?ev.eventType:'noop')
			  + '_' + (ev.hasOwnProperty('id')?ev.id:'0')
			  + '_' + (ev.hasOwnProperty('timeStamp')?(+ev.timeStamp):(+new Date));

			return s === callee.STAMP ? (ALLOW_PREVIOUS_EVENT?ev:0) : ((callee.STAMP=s), ev);
		}
		.setup({ STAMP:'' })
		.copy('..'),

		tempRedraw : function tempRedraw_F_o_x(/*fct*/userFunc,/*context=null*/cx,  t,b,r)
		//----------------------------------
		// [190602] Call `userFunc()` with no arg in `cx` context (optional) making
		// sure it is executed with `enableRedraw` temporarily set to true. (If the
		// flag is already turned on, just execute the function.)
		// Return `userFunc` returned value.
		// Example: `$$.tempRedraw( function(){$.sleep(100)} );`
		// [REM] This method is made available straight from `$$`.
		// ---
		// => any
		{
			if( 'function' != typeof userFunc ) return;
			
			(b=(t=app.scriptPreferences).enableRedraw) || (t.enableRedraw=true);
			r = userFunc.call(cx||null);
			b || (t.enableRedraw=false);
			
			return r;
		}
		.copy('..'),
		
		uiLevel : function uiLevel$B$_(/*0|false|1|true*/restore,  I,bk,t)
		//----------------------------------
		// [210116] Mute/restore user interaction level.
		// `restore` ::  0|false  -> Set user interaction level to NEVER_INTERACT
		//               1|true   -> Restore the original user interaction level
		// [REM] In order to minimize DOM commands this method relies on internal
		// `Env` data, that is `~.UILV()` backup. Use it to temporarily mute
		// ID alerts while opening or processing documents, then call `uiLevel(1)`
		// to go back to the registered ui level. (If the script has been loaded
		// in NEVER_INTERACT state, this method has no effect.)
		// ---
		// => undef
		{
			I = callee.µ['~'];

			bk = I.UILV();
			if( 'NEVER_INTERACT' == I.UL2S[bk] ) return;              // Nothing to do (already in mute mode.)

			t = -(0===restore||false===restore)                       // -1 :: MUTE
			 || +(1===restore||true===restore);                       // +1 :: RESTORE

			if( !t ) return;                                          // Ignore exotic arg.

			app.scriptPreferences.userInteractionLevel = 0 > t ?
			+UserInteractionLevels.NEVER_INTERACT
			: bk;
		}
		.copy('..'),
		
		canToolKit : function canToolKit_B()
		//----------------------------------
		// [210106] Whether ExtendScript Toolkit is available and presently running.
		// ---
		// => 1 [OK]  |  0 [KO]
		{
			return +('IDLE'==callee.µ['~'].ESTK());
		}
		.copy('..'),

	})
