/*******************************************************************************

		Name:           Errors
		Desc:           Error-related API of the Root module.
		Path:           /core/Root/$$.errors.jsxinc
		Require:        ---
		Encoding:       ÛȚF8
		Core:           YES
		Kind:           Part of the Root module.
		API:            beep() logErrors error()=>[[global]] receiveError()
		DOM-access:     ---
		Todo:           ---
		Created:        150502 (YYMMDD)
		Modified:       201111 (YYMMDD)

*******************************************************************************/

	//==========================================================================
	// BACKGROUND
	//==========================================================================

	/*
	
	[ECMA] The function call Error(...) is equivalent to the object creation
	expression new Error(...) with the same arguments.
	
	Properties of an Error instance in ExtendScript. (All are R/W.)
	----------------------------------------------------------------------------
	PROPERTY      CAST   STD*   NOTE
	----------------------------------------------------------------------------
	message       STR    YES    1st argument of the constructor.
	name          STR    YES    The 'type' of the error, that is, the constructor
	                            name. In ExtendScript, however, `myErr.name` will
	                            return "Error" unless rewritten.
	description   STR    NO     Alias of message. Any change in description is
	                            reflected in message, and vice versa.
	fileName      STR    NO     2nd argument of the constructor.
	line          NUM    NO     3rd argument of the constructor.
	number        NUM    NO     A conventional error-related number; custom errors
	                            are conventionally numbered 1.
	source        STR    NO     By default, the complete source file, or any other
	                            custom string. (Unavailable in jsxbin.)
	start         NUM    NO     (No description available.)
	end           NUM    NO     (No description available.)
	----------------------------------------------------------------------------
	toString()    STR    YES    Localized string in the form "Error: <message>",
	                            in French: "Erreur: <message>", etc.
	toSource()    STR    NO     Evaluable string supposed to rebuild the Error.
	----------------------------------------------------------------------------
	* Tells whether the property is standard (YES) or non-standard (NO).
	
	Native Error subtypes in ExtendScript (from CS4).
	----------------------------------------------------------------------------
	CLASS*          STD  PURPOSE
	----------------------------------------------------------------------------
	EvalError       YES  Error that occurs regarding the global function eval().
	                     [Obsolete.]
	RangeError      YES  Indicates that a numeric value has exceeded its
	                     allowable range.
	ReferenceError  YES  An invalid reference value has been detected.
	SyntaxError     YES  A parsing error has occurred.
	TypeError       YES  The actual type of an operand is different than the
	                     expected type.
	URIError        YES  One of the global URI handling functions was used in a
	                     way that is incompatible with its definition.
	InternalError   NO   Internal error.
	FatalError      NO   Fatal error.
	IOError         NO   IO error.

	----------------------------------------------------------------------------
	* Stijn (Extendables) notes, with some versions of ExtendScript "all error
	types (are) considered the base class Error. This problem makes it impossible
	to do simple comparisons on errors." Indeed, `myErr instanceOf <anyErrorType>`
	is TRUE, and `myErr.constructor` (as `myErr.__class__`) is not reliable.

	ExtendScript's tools related to error management.
	----------------------------------------------------------------------------
	ACCESS       CAST   NOTE
	----------------------------------------------------------------------------
	$.error      Error  The most recent runtime error information. Assigning
	                    error text to this property generates a runtime error;
	                    however, the preferred way to generate a runtime error
	                    is to throw an Error object.
	$.fileName    STR   Full path, URI-encoded, of the script file being
	                    executed. This property is more reliable than
	                    `myError.fileName` as it still reveals the script file
	                    name in jsxbin env.
	                    E.g "~/Documents/Adobe%20Scripts/My%20Script.jsx"
	$.stack       STR   NL-separated list of stacked programs and functions.
	                    E.g.  "[My Script.bin.jsx]\n[210]\nMyTestFunc()\n"
	                    Note that file names *are not* URI-encoded.
	$.engineName  STR   The current engine name, as specified by #targetengine.
	                    Default is "main".
	myFile.error  STR   "A string containing a message describing the most
	                    recent file system error. Typically set by the file
	                    system, but a script can set it. Setting this value
	                    clears any error message and resets the error bit for
	                    opened files. Empty string if there is no error."
	                    E.g.
	                    var ff=new File('does/not/exist.txt');
	                    if( !ff.open('r') ) alert( ff.error );
	                    // => File or folder does not exist
	----------------------------------------------------------------------------

	Additional Notes.

	Issue with `finally`. - The following code *will not alert* any error in
	ExtendScript in spite of the fact the thrown error has no `catch` counterpart:
	      function f()
	      {
	          try{ throw "MyError"; }
	          finally{ return; }
	      }
	      
	      f();
	This is due to the presence of `return` in the finally-block.


	<err>.name, <err>.number, etc., are only relevant for parse-time or runtime
	exceptions generated by ExtendScript iself. So it is discouraged to use
	native subclasses when constructing a custom error. A better strategy for
	managing custom errors is manually writing custom data before throwing the
	error:
	
	      var e = Error("My error desc.", "My custom location", <CustomLineNb>);
	      e.name = 'MyCustomError'; // do not use reserved error classes
	      e.number = <customNumber>;
	      // additional data if needed
	      throw e;
	
	`Error.runtimeError(uint[,str])` is a static method of the Error function. It
	allows to fake a runtime error using a predefined error code (uint) and
	an optional string in case the native error message expects it.
	
	E.g.
	
	      Error.runtimeError(2,'xyz');
	=>
	      JavaScript Error!
	
	      Error Number: 2
	      Error String: xyz is undefined
	
	      Engine: main
	      File: <filename>
	      Line: <line>
	      Source: Error.runtimeError(2,'xyz');

	List of error codes:

	     2        %1 is undefined
	     3        Cannot assign value
	     4        Unterminated string constant
	     5        Unterminated comment
	     6        Bad digit in number
	     7        Language feature '%1' is not supported
	     8        Syntax error
	     9        Illegal use of reserved word '%1'
	     10       Illegal break or continue outside a loop
	     11       Label not found
	     12       Expression is not constant
	     13       Too many closing braces
	     14       No matching closing brace found
	     15       Try without catch or finally
	     16       catch/finally without try
	     17       Variable name expected
	     18       Variable or value expected
	     19       Bad argument %1
	     20       Bad argument list
	     21       %1 is not an object
	     22       %1 does not have a constructor
	     23       %1 does not have a value
	     24       %1 is not a function
	     25       Expected: %1
	     26       %1 cannot work with instances of this class
	     27       Stack overrun
	     28       Out of memory
	     29       Uncaught exception %1
	     30       Illegal 'return' outside of a function body
	     31       Bad or invalid URI: %1
	     32       Cannot execute
	     33       Internal error
	     34       Execution halted
	     35       Timeout
	     36       Not implemented
	     37       Character conversion error
	     38       Partial multibyte character found
	     39       More than one switch default
	     40       %1 redeclared
	     41       %1 is out of range
	     42       Catch after unconditional catch
	     43       Evaluation error
	     44       Cannot convert
	     45       Object is invalid
	     46       %1 is read only
	     47       Data type mismatch
	     48       File or folder does not exist
	     49       File or folder already exists
	     50       I/O device is not open
	     51       Read past EOF
	     52       I/O error
	     53       Permission denied
	     54       Uncaught JavaScript exception: %1
	     55       Object does not support the property or method '%1'
	     56       Cannot connect to %1
	     57       Cannot resolve reference
	     58       I/O Timeout
	     59       No response
	     60       Not well-formed (invalid token)
	     61       Unclosed token
	     62       Mismatched tag
	     63       Duplicate attribute
	     64       Junk after document element
	     65       Entity parsing error
	     66       XML declaration not at start of external entity
	     67       Unknown encoding
	     68       Encoding specified in XML declaration is incorrect
	     69       Unclosed CDATA section
	     70       Requested feature requires DTD support
	     71       Unexpected DOCTYPE name
	     72       Unbound namespace prefix
	     73       Unknown axis name: %1
	     74       Unsupported axis
	     75       Operand expected, but found %1
	     76       Node set expected
	     77       Node test expected, but found %1
	     78       Cannot set property %1
	     79       ActionScript error: %1
	     // ---
	     XML      XML error in line %1
	     General  Error #%1

	*/

	//==========================================================================
	// IMPLEMENTATION NOTES
	//==========================================================================
	
	/*

	The Errors snippet is not implemented as a specific module to make it
	fully available throughout the framework even before completing load.
	
	Any custom error MUST be thrown using $$.error(message).
	
	All errors SHOULD be caught using $$.receiveError(e) from within a
	catch block.
	
	- Message: nude error message.
	- Location: file, line (if possible).
	- Context: stack, engine, jsxbin.
	- Stage: ?
	- Logged: whether the error has been successfully logged.

	*/

	[PRIVATE]
	
	({

		ELOG: function(/*Error&*/e,/*?str*/rawStack,  $$,t,s,x)
		//----------------------------------
		// (Error-Log.) Conditionally log an error, whatever its origin.
		// [ADD200601] Extra info.
		// [ADD180318] Made this snippet available as a private routine,
		// so it's now callable from `receiveError` based on the raw
		// contents of $.stack (-> rawStack.)
		// If Log is available and non-MUTE, warn the error.
		// If logErrors is ON, force the logger to wake up.
		// ---
		// => undef
		{
			$$ = $.global[callee.µ.__root__]; // agnostic reference
			
			// Being a core module, Log is available as soon as
			// included, that is, almost instantly. However, since
			// `error()` requires high security, we explicitly check
			// that $$.Log is functional.
			// ---
			if( 'function' != typeof $$.Log ) return;
			
			// Rem: $$.Log() => -1 (trace) | 0 (mute) | +1 (warn)
			// ---
			t = $$.Log() || ($$.logErrors && $$.Log.warn(true));
			if( !t ) return;
			
			// Get the stack (it's already formatted if `e.managed`.)
			// ---
			s = e.managed
			? e.stack
			: ( rawStack && rawStack.split(RegExp.LINEs).join(' :: ') );
			
			// [ADD200601] Extra info.
			// ---
			x = e.managed
			? __("Engine: %1 - File: %2 - Location: %3", e.engine, e.fileName, e.where||"<unknown>.")
			: __("Engine: %1 - File: %2 - Line: %3.", $.engineName, e.fileName, e.line||"<unknown>");

			// Do not take the risk of over-erroring.
			// ---
			try
			{
				$$.Log.warn(__("ERROR > [%1] %2%3%4%3Stack: %5"
					, e.managed ? "Managed" : "Wild"
					, e.message
					, $$.newLine + $$.Log.spaces
					, x
					, s || "<empty>."
					));

				e.logged=1;
			}
			catch(_){ }
		},

	})

	//==========================================================================
	// API
	//==========================================================================

	[PUBLIC]

	({
		beep: 'function' == typeof $.global.beep
		? function beep_(){ $.global.beep() }
		: function beep_(){ },

		// Whether errors must be forced to warn (even in MUTE log mode.)
		// This property is actually determined at loading time according
		// to the context, and can be freely changed by the client code.
		// ---
		logErrors : 1,

		error: function error_S_r_(/*str*/msg,/*?ref|str*/src,  $$,a,i,s,p,fn,fx,jb,e)
		//----------------------------------
		// Throw a managed Error with additional information.
		// [CHG171024] Improved stack parsing and file resolver.
		// [FIX181018] Fixed a typo.
		// [ADD181128] Made [[global]] thanks to copy().
		// ---
		// msg :: Nude error message (might be localized.)
		// src :: (opt.) Module, function or file where the error occured.
		//        [ADD171023] If `src` is a string, use it as source identifier.
		// ---
		// => [this function doesn't return since it always throws an error]
		{
			$$ = $.global[callee.µ.__root__]; // agnostic reference

			// Parsing `$.stack`. It has the form:
			// [<file>]\n ([<number>]\n)? (<func>(<args>?)\n)+ error_S_r_(<args>)\n
			// The presence of [<number>] indicates a jsxbin in the stack.
			// E.g "[My Script.bin.jsx]\n[210]\nMyTestFunc()\n"
			// Note that <file> part(s) are not URI-encoded here.
			// ---
			// => fn :: deepest function name -- if `myFunc(...)` is found.
			//    fx :: top file name         -- if `[<fileName>]` is found.
			//    jb :: jsxbin flag numeral   -- if `[<number>]` is found.
			// ---
			a = $.stack.split(RegExp.LINEs); // => [<file>, s1, s2, ..., sN, <here>, '']
			while( a.length && !a.pop() );   // => [<file>, s1, s2, ..., sN]

			for( fn=fx=jb='', i=a.length ; i-- ; )
			{
				if( !(s=a[i].trim()).length )
				{
					a.splice(i,1);
					continue;
				}
				switch( '])'.indexOf(s.slice(-1)) )
				{
					case 0: // <MustBeEmpty>[xyz]
						if( '[' != s.charAt(0) ) break;
						s = s.slice(1,-1);
						
						// (a) xyz is a numeral => jb=xyz (if not defined)
						// (b) otherwise        => fx=xyz (only if i==0)
						// ---
						'-'+s === ''+-s         // Quick numeral test!
						? ( jb || (jb=s) )
						: (  i || (fx=s) );
						break;

					case 1: // xyz(...)  =>  fn=xyz (if not defined)
						fn || ( 0 < (p=s.indexOf('(')) && (fn=s.slice(0,p)) );
						break;

					default:;
				}
			}

			// Attempt to retrieve a full, valid, readable pathname.
			// Uses $$.Env.runningScript as a hint. In general `$.fileName`
			// isn't reliable at this point as it returns the *present* file
			// `.../$$.errors.jsxinc`; anyway it's helpful in a JSXBIN stream.
			// => fx  ::  str [OK]  |  '' [KO]
			// ---
			while( (!fx) || (!File(fx).exists) )
			{
				// This block is quite certainly entered as `fx` is
				// ordinarily a simple filename with no parent path.
				// ---
				s = 'function' == typeof $$.Env ? $$.Env.runningScript : $.fileName;
				if( !s ){ fx=''; break; }

				// It is likely the case that `fx` is the name part of the
				// running script pathname. [REM] `fx` is not URI-encoded.
				// ---
				if( (!fx) || fx===File(s).displayName )
				{
					fx = File(s).fullName;
					break;
				}
				
				// Last chance: test whether `fx` refers to a file that
				// belongs to the parent folder of the running script.
				// ---
				if( (s=File(s).parent).exists && File(s=s.fullName+'/'+fx).exists )
				{
					fx = s;
					break;
				}
				
				// Fallback: keep fx unchanged.
				// ---
				break;
			}
			
			// Initialize the Error object.
			// [REM] `new` is not required according to ECMA.
			// ---
			e = Error(/*message*/msg,/*fileName*/fx,/*line*/0);
			// ---
			e.name    = 'ManagedError';     // Custom type.
			e.managed = 1;                  // IdEx special flag.
			e.number  = 1;                  // Error number.
			// ---
			e.engine  = $.engineName;       // Current engine.
			e.jsxbin  = jb;                 // JsxBin ID (str.)
			e.stack   = a.join(' :: ').replace(/(,undefined)+\)/g,')'); // [CHG201111] Cosmetics: remove meaningless undefined args.
			// ---
			e.where   = '';                 // Pending.
			e.logged  = 0;                  // Pending.

			// Parse and format the source. (At this step, `fn`
			// and `fx` can be used as guess or fallback.) The
			// final `src` param MUST have one the following forms:
			// ---
			// "<moduleName>"               Name of the erroring module.
			// "<funcName>"                 Name of the erroring function.
			// "<moduleName>.<funcName>"    Function name prefixed by module name.
			// "[<file>]"                   File name.
			// <any-string>                 Custom src string supplied.
			// ""                           Empty (unknown source.)
			// ---
			switch( typeof (src||(src=0)) )
			{
				case 'string':
					// Non empty string => keep it as supplied.
					// ---
					break;
			
				case 'function':
					// Some function has been passed in. It might be either
					// (a) a module, (b) a module func, (c) any func.
					// In case (a) we use `fn` as a hint.
					// ---
					// [REM] What makes the algorithm a bit obscure here
					// is the attempt to provide the most informative
					// result, viz. `<module>.<key>` whenever possible.
					// So, when the link is missing, we try to restore
					// data using both the stack and the `__path__` prop.
					// (This only regards IdExtenso's functions.)
					// ---
					if( !src.hasOwnProperty('__path__') )
					{
						// Default mechanism for simple (external) functions.
						// ---
						src = fn = src.name;
						break;
					}

					$$.isModule(p=src.__path__) || ( (fn=src.name),(src=src.µ||'') );
					
					// ---
					// src :: module | ''  ;  fn :: funcName | ''
					// ---

					// Express `fn` as <mod>.<fKey> if possible.
					// ---
					while( src && (s=fn) )
					{
						// Simple case:
						// src[funcKey] === funcKey_signature(){}
						// ---
						0 < (i=fn.indexOf('_')) && (s=fn.slice(0,i));
						if( fn===(src[s]||0).name ){ s='.'+s; break; }

						// Hard case (parsing `__path__`)
						//            .../<src>/            [KO]
						//            .../<src>/funcKey     [Try]
						//            .../<src>/~/funcKey   [Try]
						// ---
						s = '/' + src + '/';
						i = p.indexOf(s);
						if( -1===i || s===p.slice(i) ){ s=''; break; }
						s = p.slice(i+s.length);
						(i = '~/' == s.slice(0,2) ? '.~' : '') && (s=s.slice(2));
						if( fn===((i?src['~']:src)[s]||0).name ){ s=i+'.'+s; break; }
						s = ''; break;
					}

					src += s;
					break;
			
				case 'object':
					// Some object has been passed in. It MUST
					// be an existing File to be taken seriously!
					// ---
					if( src instanceof File && src.exists )
					{
						src = '[' + src.displayName + ']';
						break;
					}

					// ---
					// no-break
					// ---
			
				default:
					// Fallback algorithm.
					// (1) If `src` has a non-empty `name`, take it.
					// (2) If `fn` is non empty, take it.
					// (3) If `fx` is non empty, take its displayName.
					// (4) If `jb` is non empty, take it.
					// ---
					src  = src.name
						|| fn
						|| (fx && File(fx).displayName)
						|| (jb ? ('<'+jb+'>') : '');
			}

			// Despite all our effort, `src` may be still empty (!)
			// ---
			e.where = src;
			
			// [CHG180318] Conditional log error routine.
			// ---
			callee.µ['~'].ELOG(e);
			throw e;
		}
		.copy('/error'),
	
		receiveError: function receiveError_$Error$_(/*Error*/e)
		//----------------------------------
		// Prompt any error.
		{
			if( e.managed )
			{
				// ELOG already processed -- cf `error()`.
				// ---
				alert([
					e.message,
					'________________________________________\r',
					__("Engine:\t%1", e.engine + (e.jsxbin && (' JSXBIN: <'+e.jsxbin+'>')) ),
					__("Where:\t%1", e.where ? e.where : '<unknown>'),
					// [CHG201111] Cosmetics: truncate long stack for display.
					__("Stack:\t%1", 'function' == typeof String.prototype.trunc ? String(e.stack).trunc(120,'\r\t\u2026\r\t',1) : e.stack),
					__("Logged:\t%1", e.logged),
					__("File:\t%1", e.fileName || '<unknown>')
				].join('\r'));
			}
			else
			{
				// Try to log me using the current stack.
				// ---
				callee.µ['~'].ELOG(e, $.stack||'');

				alert([
					e.message,
					'________________________________________\r',
					__("File:\t%1", File(e.fileName).displayName),
					__("Line:\t%1", e.line)
				].join('\r'));
			}
		},
	})
