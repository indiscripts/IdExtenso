/*******************************************************************************

		Name:           Messaging
		Desc:           Simple Messaging API of the Root module.
		Path:           /core/Root/$$.messaging.jsxinc
		Require:        Ext/scriptui
		Encoding:       ÛȚF8
		Core:           YES
		Kind:           Part of the Root module.
		API:            success() failure() edit() yesNo() dual() input()
		DOM-access:     ---
		Todo:           ---
		Created:        170427 (YYMMDD)
		Modified:       230513 (YYMMDD)

*******************************************************************************/

	//==========================================================================
	// NOTICE
	//==========================================================================

	/*
	
	Provides simple messaging functions for quick prompts, warnings, or
	pending messages.
	
	*/

	[PRIVATE]
	
	({
		// Default title for message widgets.
		//----------------------------------
		TTLE : '\xA0' + "IdExtenso",

		KTXT: function(/*Group|Panel|Window*/parent,/*0|1*/edit,/*str*/txt,/*0|1*/autoMg,  q,n,ML,xm,ym,r,o)
		//----------------------------------
		// (Text-Factory.)
		// => EditText | StaticText
		{
			q = callee.Q||(callee.Q={ multiline: false, });

			// Multiline?
			// ---
			ML = 30 < (n=txt.length) || RegExp.LINE.test(txt);

			// Automargin?
			// ---
			if( autoMg )
			{
				30 > (xm=3*(20-n)) && (xm=30);
				ym = 15 + (xm>>>1);
				parent.margins = [xm,ym,xm,ym];
			}

			q.multiline = ML;
			r = parent.add(edit?'edittext':'statictext', void 0, txt, q);
			ML && !edit && (r.characters=40);

			o = r.preferredSize;
			o.width  = edit ? 400 : -1;
			o.height = edit ? (ML ? 300 : 22) : -1;

			edit && (r.active=true);
			return r;
		},

		KBTS: function(/*Window|Group|Panel*/parent,/*str*/okStr,/*str*/koStr,  r)
		//----------------------------------
		// (Buttons-Factory.) [FIX190202]
		// => Group
		{
			r = parent.add('group');
			
			okStr && (r.window.ok=r.add('button',void 0,okStr,{name:'ok'}));
			koStr && (r.window.ko=r.add('button',void 0,koStr,{name:'cancel'}));

			return r;
		},
		
		WMSG: function(/*'dialog'|'palette'|'window'*/tpe,/*str*/title,/*0|1*/border,/*0|1*/edit,/*str*/txt,/*str*/ok,/*str*/ko,/*0|Window*/w,/*0|1*/autoMg,  q,o)
		//----------------------------------
		// [ADD180531] [FIX190202] [CHG191228] Changed key name.
		// [CHG200117] Use a panel in borderless case.
		{
			// [CHG200117]
			q = callee[border?'Q1':'Q0'];
			q.spacing = (ok || ko) ? 20 : 0;

			o = q.properties;
			o.type = tpe;
			o.text = title;
			o.closeButton = !ko;

			// [FIX190203] o.bounds must be reset from scratch here.
			// ---
			o = o.bounds = Array(4);
			o[0] = w && (w.location.x);
			o[1] = w && (w.location.y + (w.size.height >>> 1));
			o[2] = void 0;
			o[3] = void 0;

			o = q[border?'Group$0':'Panel$0'].Custom$data;
			o[1] = edit;
			o[2] = txt;
			o[3] = autoMg;
			
			o = q.Custom$0;
			o[1] = ok || '';
			o[2] = ko || '';
			
			return q;
		}
		.setup
		({
			// Border case -> Group$0
			// ---
			Q1:
			{
				properties:             { type:'dialog', text:'', borderless:false, closeButton:true },
				alignChildren:          ScriptUI.CT,
				margins:                20,
				spacing:                20,
				Group$0:                { Custom$data: ['KTXT', /*edit*/1, /*text*/'', /*autoMargin*/0], },
				Custom$0:               ['KBTS', /*okStr*/'', /*koStr*/''],
			},

			// Borderless case -> Panel$0
			// ---
			Q0:
			{
				properties:             { type:'dialog', text:'', borderless:true, closeButton:true },
				alignChildren:          ScriptUI.CT,
				margins:                20,
				spacing:                20,
				Panel$0:                { Custom$data: ['KTXT', /*edit*/1, /*text*/'', /*autoMargin*/0], },
				Custom$0:               ['KBTS', /*okStr*/'', /*koStr*/''],
			},
		}),

		MSSG : function(/*str*/txt,/*str|false*/title,/*uint|false*/msec,/*0|1*/failing,/*?Window*/win,  ui,w,i,k)
		//----------------------------------
		// (Generic-Message.)
		// [REM] Palettes usually show up on $.screens[0] whatever app screen.
		// [CS4] If borderless==false (titlebar shown) app screen is focused on.
		// [CHG180531] Refactored code.
		// => undef
		{
			// Build the UI.
			// ---
			ui = this.WMSG(msec?'palette':'dialog', title||'', +(false!==title), 0, txt, msec?'':__("OK"), '', win||0, 1);
			w = ScriptUI.builder.call(this,ui);

			// Position and show.
			// ---
			$.global[callee.µ.__root__].centerWindow(w,win);
			w.show();
			
			if( 'dialog' != w.type )
			{
				// [ADD200117] Seems to work better.
				try{ w.enabled=true }catch(_){}

				// [ADD170504] Calling update() here seems to solve (rare?) issues on MacOS
				// [RES] https://forums.adobe.com/message/9484275#9484275
				// ---
				w.update();
				$.sleep(msec);
				
				// Required if a persistent engine is running.
				// [REM] Do not use hide() on a 'dialog'.
				// ---
				w.hide();
				return;
			}

			for(i=w.children.length;i--;w.remove(i));for(k in w)delete w[k];$.gc(); // [FIX230311] CLEANER IN CS
		},

		EDIT : function(/*str*/txt,/*str|false*/title,/*?Window*/win,  ui,w,i,k)
		//----------------------------------
		// (Editable-Message-Box.) [CHG180531]
		// => undef
		{
			// Build the UI.
			// ---
			ui = this.WMSG('dialog', title||'', +(false!==title), 1, txt, __("OK"), '', win||0);
			w = ScriptUI.builder.call(this,ui);

			// Position and show.
			// ---
			$.global[callee.µ.__root__].centerWindow(w,win);
			w.show();
			for(i=w.children.length;i--;w.remove(i));for(k in w)delete w[k];$.gc(); // [FIX230311] CLEANER IN CS
		},

		DUAL : function(/*str*/txt,/*str*/opt1,/*str*/opt2,/*str|false*/title,/*?Window*/win,  ui,w,r,i,k)
		//----------------------------------
		// (Two-Options-Box.) [ADD230513]
		// => 1 [OPT1]  |  0 [OPT2]
		{
			// Build the UI.
			// ---
			ui = this.WMSG('dialog', title||'', +(false!==title), 0, txt, opt1, opt2, win||0);
			w = ScriptUI.builder.call(this,ui);

			// Position and show.
			// ---
			$.global[callee.µ.__root__].centerWindow(w,win);

			r = 1==w.show() ? 1 : 0;
			for(i=w.children.length;i--;w.remove(i));for(k in w)delete w[k];$.gc(); // [FIX230311] CLEANER IN CS
			return r;
		},

		YSNO : function(/*str*/txt,/*str|false*/title,/*?Window*/win,  ui,w,r,i,k)
		//----------------------------------
		// (Yes-No-Box.) [CHG230513] Simply invokes ~.DUAL.
		// this :: ~
		// => 1 [OK]  |  0 [KO]
		{
			return this.DUAL(txt, __("Yes"), __("No"), title, win);
		},

		WINP: function(/*'dialog'|'palette'|'window'*/tpe,/*str*/title,/*0|1*/border,/*str*/caption,/*str*/defVal,/*str[]|0*/ops,/*str*/ok,/*str*/ko,/*0|Window*/w,  q,o,i,a)
		//----------------------------------
		// [ADD191228]
		{
			q = callee.Q || (callee.Q={
				properties:             { type:'dialog', text:'', borderless:false, closeButton:true },
				alignChildren:          ScriptUI.CT,
				margins:                20,
				spacing:                20,
				Group$0:
				{
					alignChildren:      ScriptUI.LT,
					margins:            8,
					spacing:            16,
					orientation:        'column',
					alignChildren:      ScriptUI.LC,
					Custom$cap:         ['KTXT', /*edit*/0, /*text*/'', /*autoMargin*/0],
					Group$gpEdi:
					{
						orientation:    'stack',
						margins:        0,
						spacing:        0,
						alignChildren:  ScriptUI.LC,
						DropDownList$dd:
						{
							properties: { items:[] },
							optimalSize:[220,24],
							visible:    false,
							onChange:   callee.ONCH,
						},
						EditText$ed:
						{
							properties: { text:'', multiline:false, scrolling:false, borderless:false },
							optimalSize:[200,22],
							active:     true,
						},
					},
				},
				Custom$0:               ['KBTS', /*okStr*/'', /*koStr*/''],
			});

			o = q.properties;
			o.type = tpe;
			o.text = title;
			o.borderless = !border;
			o.closeButton = !ko;

			// [FIX190203] o.bounds must be reset from scratch here.
			// ---
			o = o.bounds = Array(4);
			o[0] = w && (w.location.x);
			o[1] = w && (w.location.y + (w.size.height >>> 1));
			o[2] = void 0;
			o[3] = void 0;
			
			q.Group$0.orientation = 16 > caption.length ? 'row' : 'column';

			o = q.Group$0.Custom$cap;
			o[2] = caption;
			
			o = q.Group$0.Group$gpEdi.EditText$ed;
			o = o.properties;
			o.text = defVal;
			
			i = ops&&ops.length;
			o.borderless = i ? true : false;

			o = q.Group$0.Group$gpEdi.DropDownList$dd;
			o.visible = i ? true : false;
			if( i )
			{
				a = o.properties.items;
				for( a.length=i ; i-- ; (a[i]=ops[i])===defVal && o.selection=i );
			}
			
			o = q.Custom$0;
			o[1] = ok || '';
			o[2] = ko || '';
			
			return q;
		}
		.setup
		({
			ONCH: function onChangeKey(  w,t,s)
			//----------------------------------
			// this::DropDownList
			{
				if( !(w=this.window) ) return;
				if( !(t=w.ed) ) return;
				if( s=this.selection )
				{
					t.text = s.text;
				}
				t.active = true;
			},
		}),

		INPT: function(/*str*/caption,/*str*/defVal,/*str|false*/title,/*str[]|0*/ops,/*?Window*/win,  ui,w,r,i,k)
		//----------------------------------
		// (Input-Box.) [191228]
		// => str [OK]  |  false [KO]
		{
			// Build the UI.
			// ---
			ui = this.WINP('dialog', title||'', +(false!==title), caption, defVal, ops, __("OK"), __("Cancel"), win||0);
			w = ScriptUI.builder.call(this,ui);

			// Position and show.
			// ---
			$.global[callee.µ.__root__].centerWindow(w,win);
			r = 1==w.show() ? w.ed.text : false;

			for(i=w.children.length;i--;w.remove(i));for(k in w)delete w[k];$.gc(); // [FIX230311] CLEANER IN CS
			
			return r;
		},

	})

	//==========================================================================
	// API
	//==========================================================================

	[PUBLIC]

	({

		success: function success_S_s_i_$Window$_(/*str*/msg,/*-1|str="IdExtenso"*/title,/*uint=auto*/seconds,/*?Window*/relWin)
		//----------------------------------
		// [ADD170427] Displays a OK message box during a short time.
		// `message` :: String to be displayed.
		// `title`   :: Title of the box (default is "IdExtenso")
		//              -1 => remove the title bar.
		// `seconds` :: Delay, in seconds.
		// `relWin`  :: Optional, related Window.
		// [CHG170508] Coerce msg and title into string (if relevant.)
		// [ADD180531] Added relWin.
		// [REM200117] Unlike Win, MacOS isn't able to display a palette/window over a modal dialog.
		// ---
		// E.g  $$.success("Web data have been entirely retrieved.", "MyTool", 3);
		// => undef
		{
			// [CHG170508] Better type checking.
			// ---
			msg = String(msg);
			title = -1===title ? false : (title ? String(title) : callee.µ['~'].TTLE);
			( 'number' == typeof seconds && 0 < seconds ) || (seconds=1+msg.length/15);
			( relWin && relWin instanceof Window ) || (relWin=void 0);
			callee.µ['~'].MSSG(msg, title, 1e3*seconds, 0, relWin);
		},

		failure: function failure_S_s_i_$Window$_(/*str*/msg,/*-1|str="IdExtenso"*/title,/*uint=infinite*/seconds,/*?Window*/relWin)
		//----------------------------------
		// [ADD180516] Displays a KO message box.
		// `message` :: String to be displayed.
		// `title`   :: Title of the box (default is "IdExtenso")
		//              -1 => remove the title bar.
		// `seconds` :: Delay, in seconds. If not provided, the box is modal.
		// `relWin`  :: Optional, related Window.
		// ---
		// [TODO] So far this method is just a placeholder, it mainly behaves as `success`
		// when `seconds` is supplied. Our purpose is just to provide a KO routine
		// semantically distinct from `success`.
		// [REM200117] Unlike Win, MacOS isn't able to display a palette/window over a modal dialog.
		// ---
		// E.g  $$.failure("Cannot open the file.", "MyTool");
		// => undef
		{
			msg = String(msg);
			title = -1===title ? false : (title ? String(title) : callee.µ['~'].TTLE);
			seconds && ( ( 'number' == typeof seconds && 0 < seconds ) || (seconds=2+msg.length/15) );
			( relWin && relWin instanceof Window ) || (relWin=void 0);

			callee.µ['~'].MSSG(msg, title, seconds ? 1e3*seconds : false, 1, relWin);
		},

		edit: function edit_S_s_$Window$_(/*str*/txt,/*-1|str="IdExtenso"*/title,/*?Window*/relWin)
		//----------------------------------
		// [ADD171105] Displays an editable text in a message box.
		// [ADD180531] Added the `relWin` (optional) argument.
		// `txt`     :: String to be displayed.
		// `title`   :: Title of the box ; default is "IdExtenso"
		//              -1 => remove the title bar.
		// `relWin`  :: Optional, related Window.
		// ---
		// E.g  $$.edit($$.JSON(app.properties), "MyTool");
		// => undef
		{
			txt = String(txt);
			title = -1===title ? false : ( title ? String(title) : callee.µ['~'].TTLE );
			( relWin && relWin instanceof Window ) || (relWin=void 0);

			callee.µ['~'].EDIT(txt, title, relWin);
		},

		yesNo: function yesNo_S_s_$Window$_B(/*str*/msg,/*-1|str=auto*/title,/*?Window*/relWin)
		//----------------------------------
		// [ADD180531] Displays a Yes/No question and return the user answer (1 or 0.)
		// `msg`     :: Y/N question to be prompted.
		// `title`   :: Title of the box ; default is __("Confirm")
		//              -1 => remove the title bar.
		// `relWin`  :: Optional, related Window.
		// ---
		// E.g  $$.yesNo("Are you sure you want to do this?");
		// => 1 [OK]  |  0 [KO]
		{
			msg = String(msg);
			title = -1===title ? false : ( title ? String(title) : __("Confirm") );
			( relWin && relWin instanceof Window ) || (relWin=void 0);
			
			return callee.µ['~'].YSNO(msg, title, relWin);
		},

		dual: function dual_S_S_S_s_$Window$_B(/*str*/msg,/*str*/captionA,/*str*/captionB,/*-1|str=auto*/title,/*?Window*/relWin)
		//----------------------------------
		// [ADD230513] Displays a message and two buttons `captionA` / `captionB`
		// (captionA being the default) and return the user choice (1 for A, 0 for B).
		// Behaves like a yes/no box with custom button texts.
		// `msg`      :: Message to be prompted.
		// `captionA` :: Text of button A (required)
		// `captionB` :: Text of button B (required)
		// `title`    :: Title of the box ; default is __("Choose")
		//              -1 => remove the title bar.
		// `relWin`   :: Optional, related Window.
		// ---
		// E.g  $$.yesNo("Are you sure you want to do this?");
		// => 1 [CHOICE_A]  |  0 [CHOICE_B]
		{
			msg = String(msg);
			title = -1===title ? false : ( title ? String(title) : __("Choose") );
			( relWin && relWin instanceof Window ) || (relWin=void 0);
			
			return callee.µ['~'].DUAL(msg, captionA, captionB, title, relWin);
		},

		input: function input_S_s_$Window$_(/*str*/caption,/*str=""*/defVal,/*-1|str="IdExtenso"*/title,/*?str[]*/options,/*?Window*/relWin)
		//----------------------------------
		// [ADD191228] Displays a OK/Cancel prompt box allowing to either enter a string or
		// select among existing choices.
		// ---
		// `caption` :: Name of the field or caption line, e.g "Enter your name:"
		// `defVal`  :: Default value, or empty.
		// `title`   :: Title of the box ; default is "IdExtenso"
		//              -1 => remove the title bar.
		// `options` :: If supplied, array of choices (dropdown list.)
		// `relWin`  :: Optional, related Window.
		// ---
		// E.g  $$.edit($$.JSON(app.properties), "MyTool");
		// => str [OK]  |  false [KO]
		{
			caption = String(caption||'');
			defVal = String(defVal||'');
			title = -1===title ? false : ( title ? String(title) : callee.µ['~'].TTLE );
			(options && options instanceof Array)  || (options=0);
			( relWin && relWin instanceof Window ) || (relWin=void 0);

			return callee.µ['~'].INPT(caption, defVal, title, options, relWin);
		},

	})
