/*******************************************************************************

		Name:           SUI
		Desc:           Basic ScriptUI features.
		Path:           /core/$$.SUI.jsxinc
		Require:        ---
		Encoding:       ÛȚF8
		Core:           YES
		Kind:           Snippet.
		API:  ScriptUI. FT LT CT RT FC LC CC RC FB LB CB RB FF LF CF RF
		                isWidget() getIndex() forceRedraw() setFocus()
		                builder() isHidden() isDisabled()
		                addKeyHandler() removeKeyHandler()
		                callback() measureWidth()
		DOM-access:     ---
		Todo:           ---
		Created:        190120 (YYMMDD)
		Modified:       210626 (YYMMDD)

*******************************************************************************/

	//==========================================================================
	// BACKGROUND
	//==========================================================================
	
	/*

	OVERVIEW: SCRIPTUI WIDGETS AND CONSTRUCTORS
	__________________________________________________________________
	
	Available ScriptUI constructors (all reachable from $.global) are:
	
	      Containers:  Window, Group, Panel, Image*
	      Texts:       StaticText, EditText
	      Lists:       ListBox, DropDownList, TreeView
	      Buttons:     Button, IconButton, Checkbox, RadioButton
	      Misc.:       ListItem, Scrollbar, Progressbar, Slider...

	* Image is a special container that only allows one ScriptUIImage
	  element (Image.children remains empty though.)

	1. A general JS fact must be kept in mind regarding ScriptUI objects.
	Do not confuse
	      (i)  a not-owned property
	and
	      (ii) an owned property which is set to `undefined`,

	In both cases obj[key]===undefined, but in case (ii) we also have
	`obj.hasOwnProperty(key)`.

	2. Default widget properties are primarily *static*, that is,
	available in the constructor itself (e.g `StaticText.preferredSize`)
	and *not* available in the prototype. Hence, checking whether
	a property is *native* involves the syntax
	
	      `<constructor>.hasOwnProperty(key)`

	[REM] In CS4/5 ExtendScript can't visit function key/value pairs using
	`for( key in func ) ...`, so default properties of <constructor> are
	not browsable. For the same reason `<constructor>.reflect.properties`
	doesn't help in CS4/5. However `<constructor>.hasOwnProperty()` still
	works:
	
	      Window.hasOwnProperty('preferredSize'); // => true in CS4-CC

	3. Apart from `Window`, constructors can't be called explicitly,
	since ScriptUI expects the declaration:
	
	      `myWidget = myContainer.add(<type>, . . .)`
	
	The way ScriptUI constructors are involved during widget creation
	is not clearly exposed. In particular, we have to check when and
	how native properties are copied in the actual widget, and whether
	the set of *creation properties* (`widget.properties`) is delt with.
	
	4. About native properties, rewriting either `<constructor>.<key>`
	or `...prototype.<key>` does not have the desired effect. Instances
	usually inherit from native settings at creation stage. (Most native
	properties are `undefined` at the constuctor level though.)
	Anyway, *adding* new properties/methods to the prototype is OK.

	*/

	//==========================================================================
	// NOTICE
	//==========================================================================

	/*

	The SUI snippet extends the `ScriptUI` object as follows:
	
	----------------------------------------------------------------------------
	NEW ScriptUI KEY    DESCRIPTION
	----------------------------------------------------------------------------
	.FT .LT .CT .RT     Resp. fill-top,    left-top,    center-top,    right-top.
	.FC .LC .CC .RC     Resp. fill-center, left-center, center-center, right-center.
	.FB .LB .CB .RB     Resp. fill-bottom, left-bottom, center-bottom, right-bottom.
	.FF .LF .CF .RF     Resp. fill-fill,   left-fill,   center-fill,   right-fill.
	----------------------------------------------------------------------------
	.isWidget(x)        Whether x is a ScriptUI control or widget, incl. Window.
	                 => true | false
	----------------------------------------------------------------------------
	.getIndex(x)        Index of the widget x in its parent.children array.
	                 => uint [OK]  |  -1 [KO]
	----------------------------------------------------------------------------
	.forceRedraw(x)     Force widget x to redraw (i.e to trigger its onDraw handler.)
	                 => 1 [OK]  |  0 [KO]
	----------------------------------------------------------------------------
	.setFocus(x,noWin)  Set the focus on the widget x if possible, or any activable
	                    child otherwise. Tell which component is finally active.
	                    If `noWin` is set, returns 0 if Window is finally made
	                    active as a fallback.
	                 => Widget [OK]  |  Window [FALLBACK]  |  0 [KO]
	----------------------------------------------------------------------------
	.builder(res,?par)  Create a ScriptUI component -- simple control or full Window --
	                    within a container (par) and based on a 'resource object' res.
	                    If no parent is provided, create a Window instance.
	                    (See details in $$.builder.jsxinc.)
	                 => par [IF SUPPLIED] | new Window
	----------------------------------------------------------------------------
	.isHidden(x,?exp)   Whether the widget x is hidden for whatever reason (exp=0)
	                    or 'in person' (exp=1). Uses the special __state__ property
	                    created from `.builder()` ; if that property is not
	                    available, isHidden(x) simply returns `+!(x.visible)`.
	                 => 1 [HIDDEN]  |  0 [NOT-HIDDEN]
	----------------------------------------------------------------------------
	.isDisabled(x,?exp) Whether the widget x is disabled for whatever reason (exp=0)
	                    or 'in person' (exp=1). Note that hidden implies disabled.
	                    Uses the special __state__ property created from `.builder()`,
	                    If that property is not available, isDisabled(x) simply
	                    returns `+!(x.enabled)`.
	                 => 1 [HIDDEN]  |  0 [NOT-HIDDEN]
	----------------------------------------------------------------------------
	.addKeyHandler(k,h) Add a 'key handler' to the builder mechanism -- h being a
	                    fct(<widget>,<value>,<key>) -- so that `<widget>[k]=value`
	                    is interpreted `h.call( <context>, <widget>, value, k )`.
	                 => callee   ;  i.e. ScriptUI.addKeyHandler
	----------------------------------------------------------------------------
	.removeKeyHandler(k) Remove the 'key handler' associated to k.
	                 => undefined
	----------------------------------------------------------------------------
	.callback(x,evt,oldFunc,newFunc) Remove and/or attach event listeners to the
	                    widget `x` for the specified event type(s) `evt`.
	                 => undefined
	----------------------------------------------------------------------------
	.measureWidth(text,?wg) Return the width of `text` (single line) as rendered
	                    in a StaticText. [Opt] `wg`: widget or Window instance.
	                 => uint
	----------------------------------------------------------------------------

	[REM] Previous IdExtenso versions were including basic ScriptUI features from
	the `Ext` snippet, that is, before having `$$.Env` available. Since various
	SUI settings have to fit environment data ($$.inCC, $$.inMac, etc) it is
	better to include the present snippet *after* $$.Env.jsxinc.

	*/

	// Minimal ScriptUI static properties.
	// ---
	#include 'SUI/$$.mini.jsxinc'
	
	// `ScriptUI.builder` and dependencies.
	// ---
	#include 'SUI/$$.builder.jsxinc'