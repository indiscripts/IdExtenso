/*******************************************************************************

		Name:           SETK (setKey)
		Desc:           Smart key-value setter.
		Path:           /core/SUI/builder/$$.SETK.jsxres
		Require:        ---
		Encoding:       ÛȚF8
		Core:           YES
		Kind:           Resource of SUI/builder
		API:            ---
		DOM-access:     NO
		Todo:           ---
		Created:        170427 (YYMMDD)
		Modified:       210711 (YYMMDD)

*******************************************************************************/

	//==========================================================================
	// BACKGROUND
	//==========================================================================

	/*

	[CHG190310] Extracted from /core/SUI/$$.builder.jsxinc

	This inner function is called from `ScriptUI.builder` during key-value
	assignment. It both manages 'scalar assignments', like in
	
	      <widget>[<key>] = <someScalarValue> ;   // E.g  `wg.text = "Hello"`
	
	and more complex assignments like
	
	      <widget>.preferredSize = { width:100 };
	
	or
	      <widget>._mouseDown = <someFunction>;   // Event handler
	
	It also takes care of external key handlers ; cf. ScriptUI.addKeyHandler().
	
	[ADD190311] Now supports the key `optimalSize`, which is a shortcut for
	`preferredSize` AND `minimumSize`. `optimalSize` may have the form
	`{ width:uint, height:uint }` or `[width, height]`. It also supports
	the partial specs `{ width:uint }` or { height:uint }`.
	
	The `optimalSize` dimensions are then loaded in both `preferredSize` and
	`minimumSize`. The property `optimalSize` remains implicit: it is not
	registered as such in the resulting UI component.

	*/

	SETK: function(/*obj*/cx,/*Widget*/wg,/*str*/k,/*any*/x,  t,w,h,q,i)
	//----------------------------------
	// Make the assignment `wg[k] = x` a bit smarter, if desired.
	// `cx` is the current builder context, it is used for managing the
	// key `k` in case `callee.EXTERN` has an associated function.
	// Cf. ScriptUI.addKeyHandler()
	// ---
	// => undef
	{
		// External assignment process?
		// ---
		if( 'function' == typeof(t=callee.EXTERN[k]) )
		{
			t.call(cx,wg,x,k);
			return;
		}
			
		// Convert special event keys into addEventListener statement.
		// k :: `_move` | `_mouseup` | `_keydown` | etc       -> no capture phase
		// [CHG190331] Changed event type detection method.
		// [CHG210124] Support of multiple event keys.
		// ---
		if( 2 < k.length && 'function'==typeof x && callee.RE_EVNS.test(k) )
		{
			(t=k.split('_')).shift();             // t :: [evType1,evType2...]
			ScriptUI.callback(wg, t, 0, x);
			return;
		}
		
		// Sizing properties (size, preferredSize, maximumSize, minimumSize)
		// [FIX190222] Prevent assignment of invalid/falsy values.
		// [ADD190311] Added 'optimalSize' shortcut (preferred+minimum.)
		// ---
		if( callee.RE_SIZE.test(k) )
		{
			if( !x ) return;

			w = x.hasOwnProperty('width')  ? x.width  : x[0];
			h = x.hasOwnProperty('height') ? x.height : x[1];
			
			// Manage optimalSize.
			// ---
			i = +('optimalSize'==k);
			(q=callee.Q_SIZE)[0] = i ? 'minimumSize' : k;

			while( k=q[i--] )
			{
				// If wg[k] already exists, it is sufficient to
				// update width and/or height.
				// ---
				if( t=wg[k] )
				{
					(0|w)===w && (t.width=w);
					(0|h)===h && (t.height=h);
					continue;
				}

				// Otherwise, we need both w AND h to be valid.
				// ---
				if( (0|w)===w && (0|h)===h )
				{
					// Create a fresh array only if necessary.
					// ---
					( (x instanceof Array) && (w===x[0]) && (h===x[1]) )
					|| (x=[w,h]);
					
					wg[k] = x;
				}
			}

			return;
		}
		
		// [CHG210711] ScriptUI automatically coerces any falsy helpTip
		// into a string: undefined -> "undefined", false -> "false".
		// In such case, best is to skip the assignment.
		// ---
		if( 'helpTip'==k && !x ) return;

		// Default assignment.
		// ---
		wg[k] = x;
	}
	.setup
	({
		Q_SIZE:  [ '', 'preferredSize' ], // Manage `optimalSize`
		
		// [CHG210124] Manage multiple event keys thru RegExp.
		// ---
		RE_EVNS: RegExp('^(?:_move|_moving|_resize|_resizing|_show|_close|_focus|_blur|_change|_changing|_click|_mousedown|_mouseup|_mousemove|_mouseover|_mouseout|_enterKey|_keydown|_keyup)+$'),

		RE_SIZE: RegExp('^(?:preferredS|minimumS|maximumS|optimalS|s)ize$'),
		EXTERN:  {},
	}),
