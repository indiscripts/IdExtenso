/*******************************************************************************

		Name:           $$ (Root)
		Desc:           IdExtenso Root module.
		Path:           /core/$$.Root.jsxlib
		Require:        ---
		Encoding:       ÛȚF8
		Core:           YES
		Kind:           Module.
		API:            =load() unload() getLoadStamp()
		                resolve() isModule() spin() isLoaded() isBooting()
		                kill() clone()
		                uid() beep() error() receiveError() success()
		                help()
		DOM-access:     ---
		Todo:           ---
		Created:        150501 (YYMMDD)
		Modified:       201127 (YYMMDD)

*******************************************************************************/

;eval(__(MODULE, '$.global', $$, 201127, 'load'))

	//==========================================================================
	// NOTICE
	//==========================================================================

	/*

	This is the root module of the framework. It provides its most
	critical features and shouldn't be edited without caution.

	The root module (referred to as `$$` in normal distributions) is
	loaded in the [[global]] scope, so all public methods or properties
	are easy to access from the outside using the syntax
	`$$.publicFeature`. For example, `$$.load('TRACE')` will load
	IdExtenso in trace mode.
	
	Then, a number of submodules (`$$.Env`, `$$.File`, etc) are
	automatically installed within the root space and form together
	the 'core' distribution. (All core modules are required.)

	Optional modules, which can be included manually according to the
	particular needs of your project, are provided in the /etc/ branch
	of the present distribution.

	*/


	[PRIVATE]

	({
		// Already declared at this stage:
		// __load__ : 0
		// __mods__ : { '/':{} },
		// in which all key-value items are to be structured as follows,
		// <module_path> => { <public_func_key> => <func_name>|<alias_func_path> }

		// `IdExtenso` MD5 (-> uid.)
		// This string is fixed and won't depend on version numbering.
		// ---
		MDID : '7127bf261e23104d72f6ea2b33f0d7c1',
		
		// [ADD170520] Hires timer stamp, initialized at loading stage.
		// ---
		HRTM : 0,
		
		KILL : function(/*ref&*/o,  k,rx,t)
		//----------------------------------
		// (Kill.) Object killer, based on Reflection interface.
		// => undefined
		{
			if( o instanceof Array && (k=o.length) )
			{
				for( ; k-- ; o[k]===Object(o[k]) && callee(o[k]) );
				o.length = 0;
			}
	
			rx = o.reflect;
			for( k in o )
			{
				if( !o.hasOwnProperty(k) ) continue;
				
				// Ignore non-writeable or type-unknown elements
				// ---
				t = rx.find(k);
				if( (!t) || ('readwrite'!=t.type) || ('unknown'==t.dataType) ) continue;
				
				// Kill o[k] (noop if it's not an object)
				// ---
				o[k]===Object(o[k]) && callee(o[k]);
				
				// Delete o[k]
				// ---
				delete o[k];
			}
		},

		CLNE : function(/*ref*/o)
		//----------------------------------
		// (Clone.) Object cloner.
		// => new object
		{
			return callee.µ.JSON.eval(callee.µ.JSON.lave(o));
		},

		RSLV: function(/*str*/s,  r,p,t)
		//----------------------------------
		// (Resolve-Path.) Given a full path s :: "/...", return its
		// target whatever it may be. For design reasons s MUST begin
		// with the character '/' which represents the [[global]] object.
		// [REM] Technically, the leading character of s is skipped.
		// => any [OK] | undefined [KO]
		{
			for(
				r=$.global, s=s.substr(1) ;
				s && 0 < (p=s.indexOf('/')) ;
				s = r.hasOwnProperty(t=s.substr(0,p)) ?
					( (r=r[t]), s.substr(1+p) ) :
					( r=void 0 )
			);

			return r;
		},

		MDPS: function(  q,o,k,z)
		//----------------------------------
		// (Module-Paths.) Collect and return the module paths
		// in a volatile array.
		// => str[]&
		{
			(q=callee.Q||(callee.Q=[])),(o=this.__mods__),(z=0);
			for( k in o ) '/' != k && o.hasOwnProperty(k) && q[z++]=k;
			return (q.length=z), q;
		},
		
		LOOP: function(/*fct(mod)*/fmod,/*0|1=0*/KEEP_ROOT,  a,n,i)
		//----------------------------------
		// (Loop-Thru.) Loop through modules forward
		// => undefined
		{
			for(
				a=this.MDPS(), n=a.length, i=KEEP_ROOT?-1:0 ;
				++i < n ;
				fmod.call(this,this.RSLV(a[i]))
			);
		},

		BACK: function(/*fct(mod)*/fmod,/*0|1=0*/KEEP_ROOT,  t,a,z,i)
		//----------------------------------
		// (Backward-Loop-Thru.) Loop through modules backward.
		// => undefined
		{
			for(
				a=this.MDPS(), z=KEEP_ROOT?-1:0, i=a.length ;
				--i > z ;
				fmod.call(this,this.RSLV(a[i]))
			);
		},

		LDMD: function(/*obj&*/mod,/*?any*/x,/*?any*/y)
		//----------------------------------
		// (Load-Module.) Load the given module.
		// [CHG180309] Added warn if onLoad has been blocked (false returned.)
		// [ADD190611] Added `spin()` steps.
		// => 0:noop | 1:processed
		{
			if( mod.__load__ ) return 0;

			if( callee.__first__ && mod.hasOwnProperty('onEngine') )
			{
				callee.µ.spin();
				callee.µ.trace(__("%1 > %2 [%3] Calling onEngine().", callee.µ, mod, mod.__modf__||'unknown'));
				mod.onEngine(x,y);
			}

			if( mod.hasOwnProperty('onLoad') )
			{
				callee.µ.spin();
				callee.µ.trace(__("%1 > %2 [%3] Calling onLoad().", callee.µ, mod, mod.__modf__||'unknown'));
				return false===mod.onLoad(x,y) ?
					( callee.µ.warn(__("%1 > %2 -> onLoad blocked.", callee.µ, mod, mod.__modf__||'unknown')), 0 ) :
					(mod.__load__=1);
			}

			mod.__load__ = 1;
			return 0;

		}.setup({ __first__:1 }),

		ULMD: function(/*obj&*/mod)
		//----------------------------------
		// (Unload-Module.) Unload mod.
		// [CHG180309] Added warn if onUnload has been blocked (false returned.)
		// => 0:noop | 1:processed
		{
			if( !mod.__load__ ) return 0;

			if( mod.hasOwnProperty('onUnload') )
			{
				callee.µ.trace(__("%1 > %2 Calling onUnload().", callee.µ, mod));
				return false===mod.onUnload() ?
					( callee.µ.warn(__("%1 > %2 -> onUnload blocked.", callee.µ, mod)), 0 ) :
					((mod.__load__=0),1);
			}
			
			mod.__load__ = 0;
			return 0;
		},
		
		ISCL: function(  G,q,i)
		//----------------------------------
		// (Include-Stage-Cleaner.) Global cleaner after include stage.
		// [CHG181128] Delete functions based on the $TMP$ flag.
		// [CHG190204] Added KEEP_OBJ_PROTO flag (cf. ESTK entry point.)
		{
			// Cleanup Function.prototype and Object.prototype.
			// ---
			callee.DEL_TEMP(Function.prototype);
			callee.KEEP_OBJ_PROTO || callee.DEL_TEMP(Object.prototype);

			// Delete temporary [[global]] keys.
			// ---
			G = $.global;
			for( q=callee.GLO_IDEX||0, i=-1 ; ++i < q.length ; delete G[q[i]] );
			for( q=callee.GLO_DOMK||0, i=-1 ; ++i < q.length ; delete G[q[i]] );
		}
		.setup
		({
			// [ADD190204] Whether to keep Object.prototype $TMP$ functions
			// on clean stage. Seems needed in ESTK CS4 for unknown reason...
			// Cf. $$.estk.jsxinc
			// ---
			KEEP_OBJ_PROTO: 0,

			GLO_IDEX: Array
			//----------------------------------
			// Temporary global keys used at include-time.
			// [ADD190611] Added `SPIN`
			(
				'PRIVATE', 'PUBLIC', 'STATIC', 'PARENT', 'PROTO', 'SPIN',
				'__path__', 'MODULE', 'CLASS', 'µ'
			),
			GLO_DOMK: Array
			//----------------------------------
			// DOM live keys awaked at include-time that might be deleted.
			// [REM] Do not delete [[global]].app!
			// [REM] The estk entry point inhibits this array.
			(
				'Locale', 'UndoModes', 'UserInteractionLevels', 'MeasurementUnits'
			),
			DEL_TEMP: function(/*obj*/o,k)
			//----------------------------------
			// [ADD181128] Delete temp funcs.
			{
				for( k in o ) o.hasOwnProperty(k)
				&& 'function' == typeof(o[k])
				&& '$TMP$' == o[k].name
				&& (delete o[k]);
			},
		}),
		
		CSTG:
		{
		#include "Root/$$.casting.jsxres"
		},
	})

	//==========================================================================
	// MODULE API
	//==========================================================================

	[PUBLIC]
	
	({
		resolve: function resolve_S_X(/*str*/path)
		//----------------------------------
		// Resolve a path--either absolute or relative to $$--into
		// *whatever* it is referring to.
		// ---
		// [REM181128] This public method has been moved upstream
		// to make it available as soon as possible. It is indirectly
		// invoked at include-time, e.g from `myFunc.copy()`.
		// ---
		// E.g $$.resolve("/$$/Env/")    => the Env module
		//     $$.resolve("Env/~/OSYS")  => the OSYS private key in Log
		//     $$.resolve("/test")       => $.global.test, or undefined
		// => module | method | any | undefined
		{
			('string' == typeof path) || path='';

			// If path is not absolute, it is assumed based on '/$$/'
			// ---
			'/'==path[0] || (path=callee.µ.__path__+path);
			'/'==path.substr(-1) || (path+='/');

			return callee.µ['~'].RSLV(path);
		},

		isModule: function isModule_sf_B(/*?str|fct*/path,  m)
		//----------------------------------
		// [ADD171024] Tells whether a path, or a function, refers
		// to a module.
		// [REM181128] This public method has been moved upstream
		// to make it available as soon as possible.
		// => 0 | 1
		{
			( 'function'==typeof path ) &&
				(path = path.hasOwnProperty('__path__') && path.__path__);

			return ( path && callee.µ['~'].__mods__.hasOwnProperty(path) ) ? 1 : 0;
		},
		
		spin: function spin_t_(/*-1|0|+1=+1*/mode)
		//----------------------------------
		// [ADD190611] Access $.Spinner's API when available.
		// mode :: +1 or undef  =>  hit the spinner
		//          0           =>  hide the spinner
		//         -1           =>  close the spinner
		{
			if( 'function' != typeof $.Spinner ) return;
			'number' == typeof mode || (mode=1);
			mode = 0 < mode ? 'hit' : ( 0===mode ? 'hide' : 'close' );
			$.Spinner[mode]();
		},
	})

	//==========================================================================
	// SNIPPETS
	//==========================================================================

	// Error manager API.
	// ---
	#include "Root/$$.errors.jsxinc"

	// [ADD170428] Simple messaging API.
	// ---
	#include "Root/$$.messaging.jsxinc"

	// [ADD171108] Help utility.
	// ---
	#include "Root/$$.help.jsxinc"

	//==========================================================================
	// PUBLIC API
	//==========================================================================

	[PUBLIC]

	({
		// ---
		// The root module has no onLoad handler,
		// since all is done straight from $$.load.
		// The root module has no onUnload handler,
		// since all is done straight from $$.unload.
		// ---

		load: function load_ts_B(/*-1|0|1|'TRACE'|'MUTE'|'WARN'=0*/logLevel,  $$,I,ts)
		//----------------------------------
		// Triggers the whole loading stage. Call onEngine once, updates dynamic data.
		// The client should invoke $$.load() when all needed modules have been included.
		// A full program can, temporarily or definitely, call $$.unload() at some point
		// to free up memory. Then it may call $$.load() again to reload needed modules.
		// Loading (resp. unloading) has no effect if $$ is already loaded (resp. unloaded.)
		// [REM] Engine-persistent tasks should be processed through onEngine handlers.
		// ---
		// logLevel :: one of 'MUTE' (or 0), 'WARN' (or 1), 'TRACE' (or -1), or undefined.
		// Default mode is MUTE, then log level is preserved til the client changes it
		// using either $$.mute(/*true*/), $$.warn(true), or $$.trace(true).
		// (See the Log module for detail.)
		// ---
		// => 1 (load OK) ; 0 (noop)
		{
			I=($$=callee.µ)['~'];

			// Already loaded?
			// ---
			if( $$.__load__ )
			{
				(+$$.warn) && $$.warn(__( "%1 > IdExtenso is already loaded.", callee.µ));
				return 0;
			}

			// [ADD170520] Stamp the load instant in microseconds. Used in
			// entropy collectors (Random), etc. See getLoadInstant().
			// Should be the unique call to $.hiresTimer within IdExtenso.
			// ---
			I.HRTM = $.hiresTimer;
			
			// [ADD190611] Call the spinner if available.
			// ---
			$$.spin();

			// Initialize the Log.
			// ---
			$$.Log.init(logLevel);
			
			// If log level is MUTE, it may still be useful to force
			// warning errors in the log file while debugging a script.
			// This is is done by turning logErrors on. By default
			// this option is activated in non-JSXBIN scripts.
			// ---
			$$.logErrors = 1 - $$.inBin;

			// Conditional trace, timestamp.
			// ---
			(+$$.trace) && ((ts=Date.now()),$$.trace(__( "%1 > IdExtenso is loading in engine '%2'...", callee.µ,$$.Env.idEngine())));

			// Include stage cleaner on first load.
			// [CHG171103] The Engine state is now updated upstream.
			// ---
			//I.LDMD.__first__ ? I.ISCL() : ($$.Env['~'].ENST=0);
			I.LDMD.__first__ && I.ISCL();

			// Load modules (dynamic data.)
			// ---
			I.LOOP(I.LDMD);
			delete I.LDMD.__first__;
			// First snapshot [TODO]
			// ---
			// $$.snapshot();
			
			// [190215] Inner Help function (listbox manager.)
			// ---
			I.RSCW.NEED_FAKE = $$.inCS;

			// Trace loading time.
			// ---
			(+$$.trace) && $$.trace(__( "%1 > IdExtenso is now loaded. (Loading time: %2ms.)", callee.µ, Date.now() - ts));

			// [ADD171103] In case IdExtenso's name is not '$$',
			// remove the key '$$' from [[global]].
			// [REM] This cleanup step was previously done from
			// ~.ISCL(), but it is better to keep `$$` available
			// up to this point.
			// ---
			'$$'==callee.µ.name || (delete $.global['$$']);

			// Set and return the __load__ flag.
			// ---
			return ($$.__load__=1);
		},

		getLoadStamp: function getLoadStamp_I()
		//----------------------------------
		// [ADD170520] Return the hires stamp of the load instant.
		// => uint32 (might be greater?)
		{
			return callee.µ['~'].HRTM;
		},

		unload: function unload_b_B(/*bool=0*/KEEP_DORMANT  ,$$,I,ts)
		//----------------------------------
		// Unload framework's data, calling modules' onUnload handlers in reversed
		// order, and resetting dynamic data to their default values.
		// [REM] Unloading $$ is highly recommended when a session-persistent
		// program is closing, as this allows each included module to update
		// dynamic data when the program re-runs.
		// [FIX180326] Helps InDesign to go back to life!
		// ---
		// [ADD180406] Added the argument `KEEP_DORMANT` (false by default.) When
		// explicitly turned on, the unload method does not force the app to
		// (re)activate, which is useful when the client script finally runs
		// an external process -- e.g myFile.execute() -- which needs to keep
		// the focus.
		// ---
		// => 1 (unload OK) ; 0 (noop)
		{
			I=($$=callee.µ)['~'];

			// Already unloaded?
			// ---
			if( !$$.__load__ ) return 0;

			// Conditional trace, timestamp.
			// ---
			(+$$.trace) && ((ts=Date.now()),$$.trace(__( "%1 > IdExtenso is unloading (KEEP_DORMANT=%2)...", callee.µ,!!KEEP_DORMANT)));

			// Unload modules (clear dynamic data.)
			// ---
			I.BACK(I.ULMD);

			// ---
			// [REM] We no longer garbage-collect refs using ($.gc();$.gc();)
			// since this may make ID crash in some versions (?)
			// --

			// Trace unloading time.
			// ---
			(+$$.trace) && $$.trace(__( "%1 > IdExtenso is now unloaded. (Unloading time: %2ms.)", callee.µ, Date.now() - ts));

			// [FIX180326] For very obscure reasons, the below code seems
			// to prevent CS5+ crashes on doc closing event!
			// ---
			app.properties.activeDocument && app.activeDocument.getElements();

			// Automatic Log.show (if log level != 0.)
			// ---
			if( $$.Log() )
			{
				$$.Log.mute();
				$$.Log.show();
			}
			else
			{
				// [FIX180326] Depending on whether the client code used modal SUI dialog, helps ID wake up!
				// [CHG180406] KEEP_DORMANT prevents app.activate().
				// [FIX190303] Added `try..catch` to bypass an error that sometimes occurs when multiple
				//             InDesign versions are running in parallel (e.g. CC 2018 *and* CC 2019.)
				// ---
				if( !KEEP_DORMANT ) try{ app.activate(); } catch(_){}
			}
			
			// Unset the __load__ flag and return 1.
			// ---
			return 1-($$.__load__=0);
		},

		isLoaded: function isLoaded_s_B(/*?str*/path,  m)
		//----------------------------------
		// Tells whether a module path refers to a loaded module.
		// If path is falsy/undefined, tells whether $$ is loaded.
		// ---
		// Eg $$.isLoaded("/$$/Env/")   => is the Env module loaded?
		//    $$.isLoaded("Env/")       => idem (using relative path)
		//    $$.isLoaded()             => is $$ loaded?
		// => 0 | 1
		{
			return ( (m=callee.µ.resolve(path)) && m.__load__ ) ? 1 : 0;
		},

		isBooting: function isBooting_B()
		//----------------------------------
		// Tells whether IdExtenso is now in 'booting mode', that is, in
		// a context where its payloads still have to be loaded in memory.
		// This condition is rawly equivalent to `!!$$.Env.engineState`
		// ---
		// [REM] From any point of your project, and typically from the
		// global scope of an `etc/` module block, you may want to know
		// whether IdExtenso actually needs to run a particular piece
		// of code supposed to be executed once. This is always the case
		// in a non-persistent engine, but a persistent engine may have
		// already executed your code (depending on its `first-call`
		// flag.) An indirect way to check such condition is
		// `$$.hasOwnProperty('ModuleName')` used at the beginning of
		// many modules. The purpose of `$$.isBooting()` is to provide
		// a reliable, direct check, based on the engine state.
		// [REM] Usually, the `onEngine` handler is the place to run
		// any code that initializes (once) the state of a module. But
		// when persistent functions have to be declared and attached
		// to external structures (ScriptUI, Math...) you may prefer
		// working in the global scope to avoid the creation of local
		// [workspace] objects. Example:
		//   ;if( $$.isBooting() ){ Math.myFunc=function(){...}; }
		// Note that there is no point in using the above pattern from
		// within the Core including block, since by nature it only
		// runs in 'booting mode.' Hence, the main usage of
		// `$$.isBooting()` is in the block of an '/etc' module.
		// [REM] Do not confuse `$$.isBooting()` with `!$$.isLoaded()`.
		// The booting state is independent from the loaded state.
		// 1. You may still have $$.isBooting()
		//    while $$ is already loaded.
		// 2. You may no longer have $$.isBooting()
		//    while $$ is not loaded yet.
		// ---
		// => 0 | 1
		{
			return 0===callee.µ.Env.engineState(0) ? 0 : 1;
		},

		kill: function kill_x_(/*any&*/x)
		//----------------------------------
		// Destroy x and return undefined.
		{
			return ((x===Object(x)) && callee.µ['~'].KILL(x)), (void 0);
		},
		
		clone: function clone_x_X(/*any*/x)
		//----------------------------------
		// Clone x (through JSON.)
		{
			return (x===Object(x)) ? callee.µ['~'].CLNE(x) : x;
		},
		
		uid: function uid_H()
		//----------------------------------
		// Unique ID of the framework.
		// => 32 char hexa string.
		{
			return callee.µ['~'].MDID;
		},

	})